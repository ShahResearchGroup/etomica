plugins {
    id "com.github.johnrengelman.shadow" version "2.0.4"
}

apply plugin: 'eclipse'

wrapper {
    gradleVersion = '5.0'
}

tasks.withType(JavaCompile) {
    options.fork = true
    options.incremental = true
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'findbugs'

    if(rootProject.hasProperty("main")) {
        apply plugin: 'application'
        mainClassName = rootProject.findProperty("main")
    }

    repositories {
        // superset of maven central
        jcenter()
    }

    sourceCompatibility = 10
    targetCompatibility = 10

    dependencies {
        testCompile 'org.junit.jupiter:junit-jupiter-api:5.2.0-M1'
        testCompile 'org.junit.jupiter:junit-jupiter-params:5.2.0-M1'
        testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.2.0-M1'
    }


    tasks.withType(FindBugs) {
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet resources.text.fromFile("$rootProject.projectDir/config/xsl/findbugs-custom.xsl")
        }
    }

    findbugs {

        /*
        Hack to prevent findbugs from running every time the project is build (as a dependency of check).
        Run findbugs explicitly with findbugsAll.
         */
        sourceSets = []
        ignoreFailures = true
    }

    test {
        useJUnitPlatform()
        testLogging.showStandardStreams = true
        testLogging {
            exceptionFormat "full"
        }
    }

    task allDeps(type: DependencyReportTask) {}
}

project(':etomica-graphics3D') {
    compileJava {
        inputs.property("moduleName", "etomica.graphics3D")
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
            ]
            classpath = files()
        }
    }
}

project(':etomica-core') {
    compileJava {
        inputs.property("moduleName", "etomica.core")
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
            ]
            classpath = files()
        }
    }

    dependencies {
//        compile 'com.fasterxml.jackson.core:jackson-databind:2.9.0'
//        compile 'gov.nist.math:jama:1.0.3'
//        compile 'org.apache.commons:commons-math3:3.3'
//        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'
//        compile 'com.github.therapi:therapi-runtime-javadoc:0.2.1'
//        compile "io.github.lukehutch:fast-classpath-scanner:2.9.4"

        compile files("$rootProject.projectDir/libs/ptplot5.10.jar")
        compile files("$rootProject.projectDir/vendor/Jama-1.0.3.jar")
        compile files("$rootProject.projectDir/vendor/commons-math3-3.3.jar")

        compile project(':etomica-graphics3D')
    }

    processResources.dependsOn ':setupPython'
    clean.dependsOn ':cleanPython'
}

project(':etomica-apps') {
    compileJava {
        inputs.property("moduleName", "etomica.apps")
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
            ]
            classpath = files()
        }
    }

    dependencies {
        compile project(':etomica-core')
        compile project(':etomica-graph')
    }
}

project(':etomica-modules') {
    apply plugin: 'com.github.johnrengelman.shadow'

    compileJava {
        inputs.property("moduleName", "etomica.module")
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
            ]
            classpath = files()
        }
    }

    dependencies {
        compile project(':etomica-apps')
    }

    jar {
        manifest {
            attributes "Main-Class": "etomica.modules.statistics.StatisticsMCGraphic"
        }
    }

//    task listDeps {
//        println configurations.compile*.absolutePath.join(':')
//    }
}

project(':etomica-graph') {
    compileJava {
        inputs.property("moduleName", "etomica.graph")
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
            ]
            classpath = files()
        }
    }

    dependencies {
//        compile 'xml-apis:xml-apis-ext:1.3.04'
//        compile 'org.apache.xmlgraphics:batik-swing:1.7'
//        compile 'org.apache.xmlgraphics:batik-transcoder:1.7'
//        compile 'org.apache.xmlgraphics:fop:1.0'
    }
}

task findbugsAll
subprojects { project -> findbugsAll.dependsOn("${project.path}:findbugsMain")}

task setupPython(type:Exec) {
    onlyIf {
        rootProject.hasProperty('buildPython')
    }
    workingDir = "${project.rootDir}"
    commandLine './setup_python.sh'
}

task cleanPython(type:Delete) {
    delete "${project(":etomica-core").projectDir}/src/main/resources/virtualenv"
}

task javadocAll(type: Javadoc) {
    options.setNoTimestamp(true)
    failOnError = false

    source subprojects.collect {
        project -> project.sourceSets.main.allJava
    }

    classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })

    destinationDir = new File(projectDir, 'docs/javadoc')
}

task cleanModules(type: Delete) {
    delete "${projectDir}/etomica_modules"
}

task linkModules(type: Exec, dependsOn: ':etomica-modules:jar') {
    dependsOn 'cleanModules'
    def modulePath = project(":etomica-modules").configurations.runtime.files.path
    def sep = System.getProperty("os.name").toLowerCase().contains("windows") ? ";" : ":"
    modulePath.add(project(":etomica-modules").jar.archivePath)
    def modulePathStr = modulePath.join(sep)

    def mainClasses = [
            "launcher=etomica.modules/etomica.modules.ModuleLauncher",
            "stats=etomica.modules/etomica.modules.statistics.StatisticsMCGraphic",
            "adsorption=etomica.modules/etomica.modules.adsorption.AdsorptionGraphic",
            "catalysis=etomica.modules/etomica.modules.catalysis.CatalysisGraphic",
            "chainequilibrium=etomica.modules/etomica.modules.chainequilibrium.ChainEquilibriumGraphic",
            "colloid=etomica.modules/etomica.modules.colloid.ColloidGraphic",
            "crystalviewer=etomica.modules/etomica.modules.crystalviewer.CrystalViewer",
            "dcvgcmd=etomica.modules/etomica.modules.dcvgcmd.DCVGCMDGraphic",
            "droplet=etomica.modules/etomica.modules.droplet.DropletGraphic",
            "droplet_atomic=etomica.modules/etomica.modules.droplet.DropletAtomicGraphic",
            "ensembles=etomica.modules/etomica.modules.ensembles.LJMCGraphic",
            "insertion=etomica.modules/etomica.modules.insertion.InsertionGraphic",
            "interfacial=etomica.modules/etomica.modules.interfacial.InterfacialSWGraphic",
            "ljmd=etomica.modules/etomica.modules.ljmd.LjmdGraphic",
            "materialfracture=etomica.modules/etomica.modules.materialfracture.MaterialFractureGraphic",
            "mu=etomica.modules/etomica.modules.mu.MuGraphic",
            "multiharmonic=etomica.modules/etomica.modules.multiharmonic.MultiharmonicGraphicMC",
            "osmosis=etomica.modules/etomica.modules.osmosis.Osmosis",
            "pistoncylinder=etomica.modules/etomica.modules.pistoncylinder.PistonCylinderGraphic",
            "reactionequilibrium=etomica.modules/etomica.modules.reactionequilibrium.ReactionEquilibriumGraphic",
            "rheology=etomica.modules/etomica.modules.rheology.RheologyGraphic",
            "reverse_osmosis=etomica.modules/etomica.modules.rosmosis.ReverseOsmosisGraphic",
            "reverse_osmosis_water=etomica.modules/etomica.modules.rosmosis.ReverseOsmosisWaterGraphic",
            "sam=etomica.modules/etomica.modules.sam.SamGraphic",
            "swmd=etomica.modules/etomica.modules.swmd.SwmdGraphic",
            "vle=etomica.modules/etomica.modules.vle.VLE",
            "b2fit=etomica.modules/etomica.modules.vle.B2Fit",
    ]

    commandLine "jlink"
    args = [
            "--module-path",
            modulePathStr,
            "--add-modules",
            "etomica.modules",
            "--output",
            "etomica_modules",
            "--strip-debug",
            "--compress", "2",
            "--no-header-files",
            "--no-man-pages",
            mainClasses.collect { ["--launcher", it] }
    ].flatten()

    doLast {
        mainClasses.collect { it.split("=")[0] }.each {
            def scriptPath = new File("${projectDir}/etomica_modules/bin/${it}").absolutePath
            exec {
                executable "python"
                args "${projectDir}/fix_module_launchers.py", "${scriptPath}"
            }
        }
    }

}
