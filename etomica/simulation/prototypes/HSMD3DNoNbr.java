// Source file generated by Etomica

package etomica.simulation.prototypes;

import etomica.action.BoxImposePbc;
import etomica.action.activity.ActivityIntegrate;
import etomica.api.IAtomType;
import etomica.api.IBox;
import etomica.api.IPotentialMaster;
import etomica.box.Box;
import etomica.config.ConfigurationLattice;
import etomica.integrator.IntegratorHard;
import etomica.lattice.LatticeCubicFcc;
import etomica.listener.IntegratorListenerAction;
import etomica.potential.P2HardSphere;
import etomica.potential.PotentialMasterMonatomic;
import etomica.simulation.Simulation;
import etomica.space3d.Space3D;
import etomica.species.SpeciesSpheresMono;

public class HSMD3DNoNbr extends Simulation {

    private static final long serialVersionUID = 1L;
    public IBox box;
    public IntegratorHard integrator;
    public SpeciesSpheresMono species;
    public P2HardSphere potential;
    
    public HSMD3DNoNbr() {
        super(Space3D.getInstance());
        IPotentialMaster potentialMaster = new PotentialMasterMonatomic(this);

        int numAtoms = 256;
        double sigma = 1.0;
        double l = 14.4573*Math.pow((numAtoms/2020.0),1.0/3.0);

        integrator = new IntegratorHard(this, potentialMaster, space);
        integrator.setIsothermal(false);
        integrator.setTimeStep(0.01);

        ActivityIntegrate activityIntegrate = new ActivityIntegrate(integrator);
        activityIntegrate.setSleepPeriod(1);
        getController().addAction(activityIntegrate);
        species = new SpeciesSpheresMono(this, space);
        species.setIsDynamic(true);
        addSpecies(species);
        potential = new P2HardSphere(space, sigma, false);
        potentialMaster.addPotential(potential,new IAtomType[]{species.getLeafType(),species.getLeafType()});

        box = new Box(space);
        addBox(box);
        box.setNMolecules(species, numAtoms);
        box.getBoundary().setBoxSize(space.makeVector(new double[]{l,l,l}));
//        box.setBoundary(new BoundaryTruncatedOctahedron(space));
        integrator.setBox(box);
        integrator.getEventManager().addListener(new IntegratorListenerAction(new BoxImposePbc(box, space)));
        new ConfigurationLattice(new LatticeCubicFcc(space), space).initializeCoordinates(box);
    }

    public static void main( String[] args )
    {
        HSMD3DNoNbr simulation = new HSMD3DNoNbr();
	    simulation.getController().actionPerformed();
	    System.out.println( "Simulation run ok");

		
    }
}//end of class
