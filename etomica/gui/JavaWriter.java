package etomica.gui;

import etomica.*;
//Java2 imports
//import java.util.HashMap;
//import java.util.Iterator;

import etomica.utility.HashMap;
import etomica.utility.Iterator;

/**
 * This class enables the writing of Java source code suitable to construct a
 * simulation that was assembled in the etomica gui.
 * An instance of a JavaWriter is constructed by Etomica for each Simulation added to it.
 * Subsequent addition of elements to the simulation result in the construction of a corresponding
 * (inner class) ElementWriter which is kept by the JavaWriter, and 
 * which handles writing of Java initialization strings for that element.
 * Writing of Java source is performed in Etomica via a selection on the File menu.
 *
 * @author David Kofke
 */
 
public final class JavaWriter {
    
    public static String getVersion() {return "JavaWriter:01.11.04";}

    private Simulation simulation;
    private HashMap elements = new HashMap();
    
    public JavaWriter(Simulation sim) {
        simulation = sim;
        for(Iterator iter=sim.allElements().iterator(); iter.hasNext(); ) {
            add((SimulationElement)iter.next());
        }
    }
    
    public void add(SimulationElement element) {
        if(element == null) return;
        else elements.put(element, new ElementWriter(element));
    }
    
    public void remove(SimulationElement element) {
        if(element == null) return;
        else elements.remove(element);
    }
    
    //methods to add/remove an instance of MCMove
    public void add(MCMove move) {
        if(move == null) return;
        else elements.put(move, new MCMoveWriter(move));
    }
    
    public void remove(MCMove move) {
        if(move == null) return;
        else elements.remove(move);
    }
    
    /**
     * Constructs string to change value of a property, and adds it to the hashlist of property
     * changes for the object. Performs no action if any arguments are null.
     */
    public void propertyChange(Object element, java.lang.reflect.Method setter, String value) {
        if(element == null || setter == null || value == null) return;
        Writer writer = (Writer)elements.get(element);
        if(writer == null) return;
        String setterString = setter.toString().trim();
        int i = setterString.lastIndexOf('(');//get string between . and (
        String initString = setterString.substring(0,i);
        i = initString.lastIndexOf('.');
        initString = initString.substring(i+1)+"("+value+");";
        writer.propertyChangeInfo.put(setterString, initString);
    }
        
    
    public void writeToFile(java.io.File file) {
	    try {
	        //Create output stream
            java.io.PrintWriter javaFile = new java.io.PrintWriter(
                        new java.io.BufferedWriter(
                            new java.io.FileWriter(file)));
            
            //File/class name, without the ".java" suffix
            String className = file.getName().substring(0,file.getName().lastIndexOf('.'));
            
            //Write import, constructor statements
            writeTop(className, javaFile);
            
            //Loop over elements and write initialization strings
            for(Iterator iter=elements.values().iterator(); iter.hasNext(); ) {
                Writer ew = (Writer)iter.next();
                ew.write(javaFile);
            }
            
            //Close constructor, write main method
            writeBottom(className, javaFile);
            
            javaFile.close();
	    } 
	    catch (Exception ex) {
	        System.err.println("Writing Java source failed"+ ex);
	    }
    }
    
    //writes import statements and beginning of constructor
    private void writeTop(String className, java.io.PrintWriter javaFile) {
        
        String spaceInitializer = "new " + simulation.space().getClass().getName() + "()"; 
        
        javaFile.println("//Source file generated by Etomica");
        javaFile.println();
        javaFile.println("import etomica.*;");
        javaFile.println();
        javaFile.println("public class "+ className +" extends Simulation {");
        javaFile.println();
        javaFile.println("  public " + className + "() {");
        javaFile.println("    super("+spaceInitializer+");");
        javaFile.println("    Simulation.instance = this;");
    }
    
    //closes constructor and write main method
    private void writeBottom(String className, java.io.PrintWriter javaFile) {
        javaFile.println("  } //end of constructor");
        javaFile.println();
        javaFile.println("  public static void main(String[] args) {");
        javaFile.println();
        javaFile.println("    Simulation sim = new "+className+"();");
		javaFile.println("    sim.mediator().go(); ");
        javaFile.println("    sim.makeAndDisplayFrame();");
        javaFile.println();
        javaFile.println("  }//end of main");
        javaFile.println("}//end of class "+className);
    }    
        
    private static abstract class Writer {    
        java.util.HashMap propertyChangeInfo = new java.util.HashMap(10);
        public abstract void write(java.io.PrintWriter javaFile);
    }
    
    /**
     * Class to hold all the initialization data for a single simulation element.
     */
    private class ElementWriter extends Writer {
        SimulationElement element;
        ElementWriter(SimulationElement element) {
            this.element = element;
        }
        
        public void write(java.io.PrintWriter javaFile) {
            String className = element.getClass().getName();
            String name = etomica.utility.StringUtility.decapitalize(element.getName());
            javaFile.println("    "+className+" "+name+"  = new "+className+"();");
            for(java.util.Iterator iter=propertyChangeInfo.values().iterator(); iter.hasNext(); ) {
                String propertyString = (String)iter.next();
                javaFile.println("      "+name+"."+propertyString);
            }                
        }
    }//end of ElementWriter
    
    /**
     * Class to hold all the initialization data for a single MCMove.
     */
    private class MCMoveWriter extends Writer {
        MCMove move;
        MCMoveWriter(MCMove move) {
            this.move = move;
        }
        
        public void write(java.io.PrintWriter javaFile) {
            String className = move.getClass().getName();
            String name = etomica.utility.StringUtility.decapitalize(move.getName());
            String integratorName = etomica.utility.StringUtility.decapitalize(move.parentIntegrator().getName());
            javaFile.println("    "+className+" "+name+"  = new "+className+"("+integratorName+");");
            for(java.util.Iterator iter=propertyChangeInfo.values().iterator(); iter.hasNext(); ) {
                String propertyString = (String)iter.next();
                javaFile.println("      "+name+"."+propertyString);
            }                
        }
    }//end of MCMoveWriter
}//end of JavaWriter