package etomica.gui;

import etomica.*;
//Java2 imports
//import java.util.HashMap;
//import java.util.Iterator;

import etomica.utility.HashMap;
import etomica.utility.Iterator;

/**
 * This class enables the writing of Java source code suitable to construct a
 * simulation that was assembled in the etomica gui.
 * An instance of a JavaWriter is constructed by Etomica for each Simulation added to it.
 * Subsequent addition of elements to the simulation result in the construction of a corresponding
 * (inner class) ElementWriter which is kept by the JavaWriter, and 
 * which handles writing of Java initialization strings for that element.
 * Writing of Java source is performed in Etomica via a selection on the File menu.
 *
 * @author David Kofke
 */
 
public final class JavaWriter {
    
    public static String getVersion() {return "JavaWriter:01.03.23";}

    private Simulation simulation;
    private HashMap elements = new HashMap();
    
    public JavaWriter(Simulation sim) {
        simulation = sim;
        for(Iterator iter=sim.allElements().iterator(); iter.hasNext(); ) {
            add((Simulation.Element)iter.next());
        }
    }
    
    public void add(Simulation.Element element) {
        if(element == null) return;
        if(element instanceof P2SimpleWrapper) elements.put(element, new P2SimpleWrapperWriter(element));
        else elements.put(element, new ElementWriter(element));
    }
    
    public void remove(Simulation.Element element) {
        if(element == null) return;
        elements.remove(element);
    }
    
    public void propertyChange(Simulation.Element element, java.lang.reflect.Method setter, String value) {
        if(element == null || setter == null) return;
        ElementWriter elementWriter = (ElementWriter)elements.get(element);
        if(elementWriter == null) return;
        String setterString = setter.toString().trim();
//        System.out.println(setterString);
        int i = setterString.lastIndexOf('(');//get string between . and (
        String initString = setterString.substring(0,i);
        i = initString.lastIndexOf('.');
        initString = initString.substring(i+1)+"("+value+");";
        elementWriter.propertyChangeInfo.put(setterString, initString);
    }
        
    
    public void writeToFile(java.io.File file) {
	    try {
	        //Create output stream
            java.io.PrintWriter javaFile = new java.io.PrintWriter(
                        new java.io.BufferedWriter(
                            new java.io.FileWriter(file)));
            
            //File/class name, without the ".java" suffix
            String className = file.getName().substring(0,file.getName().lastIndexOf('.'));
            
            //Write import, constructor statements
            writeTop(className, javaFile);
            
            //Loop over elements and write initialization strings
            for(Iterator iter=elements.values().iterator(); iter.hasNext(); ) {
                ElementWriter ew = (ElementWriter)iter.next();
                if(ew.element instanceof P2SimpleWrapper) continue;
                ew.write(javaFile);
            }
            
            //Write P2SimpleWrapper strings
            for(Iterator iter=elements.values().iterator(); iter.hasNext(); ) {
                ElementWriter ew = (ElementWriter)iter.next();
                if(!(ew.element instanceof P2SimpleWrapper)) continue;
                ew.write(javaFile);
            }
 
            //Close constructor, write main method
            writeBottom(className, javaFile);
            
            javaFile.close();
	    } 
	    catch (Exception ex) {
	        System.err.println("Writing Java source failed"+ ex);
	    }
    }
    
    //writes import statements and beginning of constructor
    private void writeTop(String className, java.io.PrintWriter javaFile) {
        
        String spaceInitializer = "new " + simulation.space().getClass().getName() + "()"; 
        
        javaFile.println("//Source file generated by Etomica");
        javaFile.println();
        javaFile.println("import etomica.*;");
        javaFile.println();
        javaFile.println("public class "+ className +" extends Simulation {");
        javaFile.println();
        javaFile.println("  public " + className + "() {");
        javaFile.println("    super("+spaceInitializer+");");
        javaFile.println("    Simulation.instance = this;");
    }
    
    //closes constructor and write main method
    private void writeBottom(String className, java.io.PrintWriter javaFile) {
        javaFile.println("  } //end of constructor");
        javaFile.println();
        javaFile.println("  public static void main(String[] args) {");
        javaFile.println("    javax.swing.JFrame f = new javax.swing.JFrame();");
        javaFile.println("    f.setSize(600,350);");
        javaFile.println();
        javaFile.println("    Simulation sim = new "+className+"();");
		javaFile.println("    sim.mediator().go(); ");
        javaFile.println("    f.getContentPane().add(sim.panel());");
        javaFile.println();
        javaFile.println("    f.pack();");
        javaFile.println("    f.show();");
        javaFile.println("    f.addWindowListener(new java.awt.event.WindowAdapter() {");
        javaFile.println("        public void windowClosing(java.awt.event.WindowEvent e) {System.exit(0);}");
        javaFile.println("    });");
        javaFile.println("  }//end of main");
        javaFile.println("}//end of class");
    }    
        
        
    
    /**
     * Class to hold all the initialization data for a single simulation element.
     */
    private class ElementWriter {
        Simulation.Element element;
        java.util.HashMap propertyChangeInfo = new java.util.HashMap(10);
        ElementWriter(Simulation.Element element) {
            this.element = element;
        }
        
        public void write(java.io.PrintWriter javaFile) {
            String className = element.getClass().getName();
            String name = etomica.utility.StringUtility.decapitalize(element.getName());
            javaFile.println("    "+className+" "+name+"  = new "+className+"();");
            for(java.util.Iterator iter=propertyChangeInfo.values().iterator(); iter.hasNext(); ) {
                String propertyString = (String)iter.next();
                javaFile.println("      "+name+"."+propertyString);
            }                
        }
    }
    
    private class P2SimpleWrapperWriter extends ElementWriter {
        P2SimpleWrapperWriter(Simulation.Element element) {
            super(element);
        }
        public void write(java.io.PrintWriter javaFile) {
            String className = element.getClass().getName();
            String name = etomica.utility.StringUtility.decapitalize(element.getName());
            Potential onlyPotential = ((P2SimpleWrapper)element).getOnlyPotential();
            String potentialName = etomica.utility.StringUtility.decapitalize(onlyPotential.getName());
            
            javaFile.println("    "+className+" "+name+"  = new "+className+"("+potentialName+");");
        }
    }    
}