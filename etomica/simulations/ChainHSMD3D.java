// Source file generated by Etomica

package etomica.simulations;

import etomica.ConfigurationLattice;
import etomica.ConformationLinear;
import etomica.Default;
import etomica.Phase;
import etomica.PotentialGroup;
import etomica.Simulation;
import etomica.Space;
import etomica.Species;
import etomica.SpeciesSpheres;
import etomica.action.activity.ActivityIntegrate;
import etomica.atom.AtomFactoryHomo;
import etomica.atom.AtomType;
import etomica.integrator.IntegratorHard;
import etomica.lattice.LatticeCubicFcc;
import etomica.nbr.CriterionSimple;
import etomica.nbr.NeighborCriterion;
import etomica.nbr.list.PotentialMasterNbr;
import etomica.potential.P1BondedHardSpheres;
import etomica.potential.P2HardSphere;
import etomica.space3d.Space3D;

public class ChainHSMD3D extends Simulation {

    public Phase phase;
    public IntegratorHard integrator;
    public SpeciesSpheres species;
    public P2HardSphere potential;
    
    public ChainHSMD3D() {
        this(Space3D.getInstance());
    }
    private ChainHSMD3D(Space space) {
//        super(space, new PotentialMaster(space));
        super(space, true, new PotentialMasterNbr(space));
        Default.FIX_OVERLAP = true;
        int numAtoms = 704;
        int chainLength = 4;
        double neighborRangeFac = 1.6;
        Default.makeLJDefaults();
        Default.ATOM_SIZE = 1.0;
        Default.BOX_SIZE = 14.4573*Math.pow((chainLength*numAtoms/2020.0),1.0/3.0);
        int nCells = (int)(Default.BOX_SIZE/neighborRangeFac);
        System.out.println("nCells: "+nCells);
        ((PotentialMasterNbr)potentialMaster).setNCells(nCells);
//FIXME        ((PotentialMasterNbr)potentialMaster).setAtomPositionDefinition(new DataSourceCOM(space));

        integrator = new IntegratorHard(potentialMaster);
        integrator.setIsothermal(false);
        integrator.addListener(((PotentialMasterNbr)potentialMaster).getNeighborManager());
        integrator.setTimeStep(0.01);
        ActivityIntegrate activityIntegrate = new ActivityIntegrate(integrator);
        activityIntegrate.setDoSleep(true);
        activityIntegrate.setSleepPeriod(1);
        getController().addAction(activityIntegrate);
        species = new SpeciesSpheres(this,chainLength);
        species.setNMolecules(numAtoms);
        ((ConformationLinear)((AtomFactoryHomo)species.getFactory()).getConformation()).setBondLength(Default.ATOM_SIZE);
        ((ConformationLinear)((AtomFactoryHomo)species.getFactory()).getConformation()).setAngle(1,0.5);
        
        phase = new Phase(this);
        new ConfigurationLattice(new LatticeCubicFcc()).initializeCoordinates(phase);
        
        P1BondedHardSpheres p1Intra = new P1BondedHardSpheres(space);
        potentialMaster.setSpecies(p1Intra,new Species[]{species});
        
        PotentialGroup p2Inter = new PotentialGroup(2, space);
        potential = new P2HardSphere(space);
        NeighborCriterion criterion = new CriterionSimple(space,potential.getRange(),neighborRangeFac*potential.getRange());
//FIXME        ApiFiltered interIterator = new ApiFiltered(new ApiIntergroup(),criterion);
//FIXME        p2Inter.addPotential(potential,interIterator);
//FIXME        NeighborCriterionWrapper moleculeCriterion = new NeighborCriterionWrapper(new NeighborCriterion[]{criterion});
//FIXME        moleculeCriterion.setNeighborRange(3.45 + criterion.getNeighborRange());
//FIXME        ((PotentialMasterNbr)potentialMaster).setSpecies(p2Inter,new Species[]{species,species},moleculeCriterion);
        ((PotentialMasterNbr)potentialMaster).getNeighborManager().addCriterion(criterion,
                new AtomType[]{((AtomFactoryHomo)species.moleculeFactory()).childFactory().getType()});
        
        //        Crystal crystal = new LatticeCubicFcc(space);
//        ConfigurationLattice conformation = new ConfigurationLattice(space, crystal);
//        phase.setConfiguration(conformation);
//        potential = new P2HardSphere(space);
//        this.potentialMaster.setSpecies(potential,new Species[]{species,species});

//        NeighborCriterion criterion = new NeighborCriterionSimple(space,potential.getRange(),neighborRangeFac*potential.getRange());
//        ((PotentialMasterNbr)potentialMaster).setSpecies(potential,new Species[]{species,species},criterion);

//      elementCoordinator.go();
        //explicit implementation of elementCoordinator activities
        integrator.addPhase(phase);
 //       integrator.addIntervalListener(new PhaseImposePbc(phase));
        
        //ColorSchemeByType.setColor(speciesSpheres0, java.awt.Color.blue);

 //       MeterPressureHard meterPressure = new MeterPressureHard(integrator);
 //       DataManager accumulatorManager = new DataManager(meterPressure);
        // 	DisplayBox box = new DisplayBox();
        // 	box.setDatumSource(meterPressure);
 //       phase.setDensity(0.7);
    } //end of constructor

}//end of class
