//Source file generated by Etomica

package etomica.simulations;

import etomica.Atom;
import etomica.ConfigurationLattice;
import etomica.Controller;
import etomica.Modifier;
import etomica.Phase;
import etomica.Simulation;
import etomica.Species;
import etomica.SpeciesSpheresMono;
import etomica.action.PhaseImposePbc;
import etomica.action.activity.ActivityIntegrate;
import etomica.graphics.ColorScheme;
import etomica.graphics.DisplayPhase;
import etomica.integrator.IntegratorHard;
import etomica.lattice.LatticeCubicFcc;
import etomica.potential.P2SquareWell;
import etomica.units.Dimension;

//remember to set up Space3D.CoordinatePair.reset if experiencing 
//problems with this simulation hanging

public class SWMD3D extends Simulation {

	public class MyModifier implements Modifier {

        public Dimension getDimension() {
            return Dimension.LENGTH;
        }

		/**
		 * @see etomica.Modifier#setValue(double)
		 */
		public void setValue(double d) {
			potential.setCoreDiameter(d);
			species.setDiameter(d);
		}

		/**
		 * @see etomica.Modifier#getValue()
		 */
		public double getValue() {
			return potential.getCoreDiameter();
		}
        
        public String getLabel() {
            return "diameter";
        }

	}
	
  public SWMD3D() {
	super(new etomica.space3d.Space3D());
//	Default.makeLJDefaults();
    
    integrator = new IntegratorHard(potentialMaster);
//  integrator.addIntervalListener(((PotentialMasterNbr)potentialMaster).getNeighborManager());
    integrator.setTimeStep(0.01);
    integrator.setIsothermal(true);
    integrator.setTemperature(300);
    ActivityIntegrate activityIntegrate = new ActivityIntegrate(integrator);
    getController().addAction(activityIntegrate);


    phase = new Phase(this);
    ConfigurationLattice configuration = new ConfigurationLattice(new LatticeCubicFcc());
    phase.setConfiguration(configuration);

    potential  = new etomica.potential.P2SquareWell();
    potential.setLambda(1.6);

    species  = new etomica.SpeciesSpheresMono(this);
	species.setNMolecules(108);

	
//	DeviceSlider tControl = new DeviceSlider(integrator, "temperature");
//	DeviceSlider sigmaControl = new DeviceSlider(new MyModifier());
//	DeviceSlider lambdaControl = new DeviceSlider(potential0, "lambda");
//	tControl.setLabel("Temperature (K)");
//	sigmaControl.setLabel("Atom size (Angstroms)");
//	tControl.setShowValues(true);
//	tControl.setShowBorder(true);
//	tControl.setMinimum(100);
//	tControl.setMaximum(700);
//	sigmaControl.setShowValues(true);
//	sigmaControl.setShowBorder(true);
//	sigmaControl.setPrecision(2);
//	sigmaControl.setMinimum(0.0);
//	sigmaControl.setMaximum(3.0);
//	lambdaControl.setShowValues(true);
//	lambdaControl.setShowBorder(true);
//	lambdaControl.setPrecision(2);
//	lambdaControl.setMinimum(1.1);
//	lambdaControl.setMaximum(2.1);
//	lambdaControl.setValue(1.4);
//	lambdaControl.setNMajor(5);


//	mediator().go();
    this.potentialMaster.setSpecies(potential,new Species[]{species,species});

    integrator.addPhase(phase);
    integrator.addIntervalListener(new PhaseImposePbc(phase));

    first = species.getAgent(phase).firstMolecule();

//	DeviceNSelector nControl = new DeviceNSelector(speciesSpheres0.getAgent(phase0));
//	nControl.setMaximum(108);
	species.setNMolecules(108);
	phase.setDensity(0.0405);
//	mediator().go();
  } //end of constructor

  public IntegratorHard integrator;
  public SpeciesSpheresMono species;
  public Phase phase;
  public P2SquareWell potential;
  public Controller controller;
  public DisplayPhase display;
  Atom first;


  
  public class MyColorScheme extends ColorScheme {
	  public java.awt.Color atomColor(Atom a) {
		  return (a == first) ? java.awt.Color.red : java.awt.Color.yellow;
	  }
  }

}//end of class
