package etomica;
/**
 * An association of two atoms.  Each AtomPair holds one CoordinatePair (obtained from a Space class),
 * which has all the methods needed to compute atom distance and momentum-difference vectors, dot products, etc.
 * Each AtomPair instance must be associated with a phase CoordinatePair requires a phase.boundary
 * for its complete definition
 */
public final class AtomPair implements java.io.Serializable {
    public static String getVersion() {return "01.01.17.0";}
    public Atom atom1, atom2;
    public final Space.CoordinatePair cPair;
//    public Potential potential;
   /**
    * Constructs and AtomPair for the given phase, but with no designated atoms.
    */
    public AtomPair(Phase phase) {
        cPair = phase.parentSimulation().space().makeCoordinatePair(phase);
    }
    /**
     * Constructs an AtomPair using the given atoms.  Assumes that the atoms are in the same phase.
     * The method atom1() will return the first atom in the argument list here, and atom2() the second.
     */
    public AtomPair(Atom a1, Atom a2) {  //Assumes a1 and a2 are in same phase
        cPair = a1.parentPhase().parentSimulation().space().makeCoordinatePair(a1.parentPhase());
        reset(a1, a2);
    }
    /**
     * Constructs an AtomPair using the given atoms and coordinate pair.  The coordinate pair
     * is assumed to correspond to the given atoms.  Passing it here can save on the overhead
     * of making it if it is already in place
     * The method atom1() will return the first atom in the argument list here, and atom2() the second.
     */
    public AtomPair(Atom a1, Atom a2, Space.CoordinatePair c) {atom1 = a1; atom2 = a2; cPair = c;}
    
    /**
     * Clones this atomPair without cloning the atoms or their coordinates.
     * The returned atomPair refers to the same pair of atoms as the original.
     * This can be used to make a working copy of an atomPair that is returned by an atomPair iterator.
     * Method is called "copy" instead of "clone" because whole object tree isn't cloned.
     */
    public AtomPair copy() {
        return new AtomPair(atom1, atom2, cPair.copy());  //cannot use super.clone() because cPair (being final) cannot then be changed to a clone of cPair
    }

   /**
    * Redefines the atom pair to correspond to the given atoms
    */
    public void reset(Atom a1, Atom a2) {
        atom1 = a1; 
        atom2 = a2;
        reset();
    }
    /**
     * Resets the coordinate pair for the current values of the atoms
     */
    public void reset() {
        cPair.reset(atom1.coordinate(), atom2.coordinate());
    }
    /**
     * @return the square of the distance between the atoms, |r1 - r2|^2
     */
    public final double r2() {return cPair.r2();}
    
    /**
     * @return the square of the velocity-difference between the atoms, |p1/m1 - p2/m2|^2
     */
    public final double v2() {return cPair.v2();}
    
    /**
     * @return the dot product of the distance and the velocity difference, (r1 - r2).(p1/m1 - p2/m2)
     */
    public final double vDotr() {return cPair.vDotr();}
    
    /**
     * @return the vector distance between the atoms, r2 - r1
     */
    public final Space.Vector dr() {return cPair.dr();}
    
    /**
     * @return the i<sup>th</sup> component of the distance vector r2 - r1, where i=0 is the first component
     */
    public final double dr(int i) {return cPair.dr(i);}
    
    /**
     * @return the i<sup>th</sup> component of the velocity-difference vector p2/m2 - p2/m1, where i=0 is the first component
     */
    public final double dv(int i) {return cPair.dv(i);}
    
    /**
     * @return the first atom of the atom pair (as set when invoking the constructor or the reset method)
     */
    public final Atom atom1() {return atom1;}
    
    /**
     * @return the second atom of the atom pair (as set when invoking the constructor or the reset method)
     */
    public final Atom atom2() {return atom2;}
    
    /**
     * Sorts by separation distance all the atom pairs produced by an atomPair iterator
     * Returns the first element of a linked list of atomPair(Linker)s, sorted by increasing distance
     * Perhaps better to do this using java.util.Collections (in java 1.2 API)
     */
    public static AtomPair.Linker distanceSort(AtomPair.Iterator api) {
        if(!api.hasNext()) return null;
        AtomPair.Linker firstLink = new AtomPair.Linker(api.next().copy());
        while(api.hasNext()) {                      //loop through all pairs generated by api
            AtomPair nextPair = api.next().copy();  //make a copy of pair for use in ordered list
            //Insert pair into ordered list in proper location
            Linker previous = null;  //holds value from previous iteration of this for-loop
            boolean inserted = false;
            for(Linker link=firstLink; link!=null; link=link.next()) {
                if(nextPair.r2() < link.pair().r2()) {  //insert nextPair before current pair
                    if(previous == null) {firstLink = new Linker(nextPair,firstLink);} //nextPair is new firstPair, to be followed by old firstPair
                    else {previous.setNext(new Linker(nextPair,link));}  //place nextPair between last and pair
                    inserted = true;
                    break;  //break out of for-loop
                }
                previous = link;
            }  //end of for loop
            if(!inserted) //reached end of list without inserting;
                previous.setNext(new Linker(nextPair));   //insert after last link
        }
        return firstLink;
    }
    
    /** 
     * Class used to define an action on an AtomPair.
     * Can be passed to allPairs method of an AtomPair iterator to perform the action on 
     * all pairs generated by the iterator
     */
    public interface Action extends java.io.Serializable {
        public void action(AtomPair pair);
    }
    /**
     * Wrapper class that makes an AtomPair.Action suitable for input to an Atom.Iterator.
     * This is needed to enable an AtomPair iterator to perform an AtomPair.Action on all its pairs.
     * Class is an Atom.Action that contains the desired AtomPair.Action. The first Atom is set
     *   externally before being fed into an Atom.Iterator, which iterates values for the
     *   second Atom of the pair; the pair is sent to the wrapped AtomPair.Action on each iteration.
     */
    public static final class ActionWrapper extends AtomAction {
        Atom atom1;
        AtomPair.Action pairAction;
        final AtomPair pair;
        public ActionWrapper(AtomPair p) {pair = p;}
        public void actionPerformed(Atom a) {
            pair.atom2 = a;
            pair.reset();
            pairAction.action(pair);
        }
        public void actionPerformed() {
            pair.reset();
            pairAction.action(pair);
        }
    }

    /**
     * Basic class for iterating over pairs of atoms.
     * Pairs are iterated by collecting pairs yielded by two atom iterators.
     * Different types of pair iterators can be constructed with different choices
     * of the atom iterators.
     */
    public static class Iterator implements java.io.Serializable {
        private AtomPair pair;  //want final, but derived class MP somehow prevents compiler from doing this
        /**
         * The iterators used to generate the sets of atoms
         */
        protected Atom.Iterator ai1, ai2;
        /**
         * A pair action wrapper used to enable the allPairs method
         */
        protected ActionWrapper actionWrapper;   // want final too //wrapper inner class defined below
        protected boolean hasNext;
        /**
         * Flag indicating whether atom1 of pair needs to be updated to point to the same atom that "atom1" in this class points to
         */
        protected boolean needUpdate1; 
        private Atom atom1;
        /**
         * Construct a pair iterator for use in the given phase.  Initial state is hasNext = false
         */
        public Iterator(Phase p) {
            pair = new AtomPair(p); 
            actionWrapper = new AtomPair.ActionWrapper(pair);
            hasNext = false;
        }
        /**
         * Construct a pair iterator for use in the given phase and which performs the given action.
         * Initial state is hasNext = false
         */
        public Iterator(Phase p, ActionWrapper wrap) {
            pair = new AtomPair(p); 
            actionWrapper = wrap;
            hasNext = false;
        }
        /**
         * Construct a pair iterator for the given phase, using the given atom iterators
         */
        public Iterator(Phase p, Atom.Iterator iter1, Atom.Iterator iter2) {
            pair = new AtomPair(p);
            actionWrapper = new AtomPair.ActionWrapper(pair);
            hasNext = false;
            ai1 = iter1;
            ai2 = iter2;
        }
        public final boolean hasNext() {return hasNext;}
        public void reset() {
            reset(null);
        }
        /**
         * Resets the first atom iterator with the given atom as an argument
         * Then resets the second iterator using the first non-null atom obtained from 
         * the first iterator.
         */
        public void reset(Atom a1) {
            if(a1==null) ai1.reset();
            else ai1.reset(a1);
            do {                  //advance up list of atoms until a pair is found
                if(ai1.hasNext()) {
                    atom1 = ai1.next();
                    ai2.reset(atom1);
                }  
                else {hasNext = false; return;}}   //end of list of atoms
            while(!ai2.hasNext());
            needUpdate1 = true;
            hasNext = true;
        }
        /**
         * Resets the first and second atom iterators using the first and second arguments, respectively.
         */
        public void reset(Atom a1, Atom a2) {
            ai1.reset(a1);
            ai2.reset(a2);
            pair.atom1 = ai1.next();
            needUpdate1 = false;
            hasNext = ai1.hasNext() && ai2.hasNext();
        }
            
        public AtomPair next() {
            if(needUpdate1) {pair.atom1 = atom1; needUpdate1 = false;}  //ai1 was advanced
            pair.atom2 = ai2.next();
            pair.reset();
            while(!ai2.hasNext()) {     //ai2 is done for this atom1, loop until it is prepared for next
                if(ai1.hasNext()) {     //ai1 has another atom1...
                    atom1 = ai1.next();     //...get it
                    ai2.reset(atom1);       //...reset ai2
                    needUpdate1 = true;     //...flag update of pair.atom1 for next time
                }
                else {hasNext = false; break;} //ai1 has no more; all done with pairs
            }
            return pair;
        }
        
        /**
         * Performs the given action on all pairs returned by this iterator
         */
        public void allPairs(AtomPair.Action act) {  
            reset();
            ai1.reset();  //this shouldn't be here, in general; need to consider it more carefully
            actionWrapper.pairAction = act;
            while(ai1.hasNext()) {
                pair.atom1 = ai1.next();
                ai2.reset(pair.atom1);
                ai2.allAtoms(actionWrapper);
            }
        }
        
        // The following are convenience extensions of AtomPair.Iterator that
        // handle some common iteration needs
        
        /**
         * Iterator for all atom pairs in a phase
         * Default is to do inter and intra pairs; this may be overridden using reset method to do
         * only intermolecular pairs
         * Uses atom iterator and atomPair iterator given by the phase.iteratorFactory class.
         */
         public static final class All extends Iterator {
            public All(Phase p) {
                super(p);
                ai1 = p.iteratorFactory().makeAtomIteratorUp();
                ai2 = p.iteratorFactory().makeAtomIteratorUpNeighbor();
                this.reset();
            }
         }
         
       /**
        * Iterates over pairs formed by given atom and all atoms from other molecules above it in list
        * If given atom is not in phase, it is considered the last atom, and no iterations are performed
        */
         public static final class Up extends Iterator {
            public Up(Phase p) {
                super(p);
                ai1 = new Atom.Iterator.Singlet();
                ai2 = p.iteratorFactory().makeAtomIteratorUpNeighbor();
                this.reset();
            }
            public Up(Phase p, Atom a) {
                super(p);
                ai1 = new Atom.Iterator.Singlet(a);
                ai2 = p.iteratorFactory().makeAtomIteratorUpNeighbor();
                this.reset();
            }
         }
         
       /**
        * Iterates over pairs formed by given atom and all atoms from other molecules below it in list
        * If given atom is not in phase, it is considered the last atom, and iterations are performed
        * over pairs formed from it and all atoms in phase
        */
         public static final class Down extends Iterator {
            public Down(Phase p) {
                super(p);
                ai1 = new Atom.Iterator.Singlet();
                ai2 = p.iteratorFactory().makeAtomIteratorDownNeighbor();
                this.reset();
            }
            public Down(Phase p, Atom a) {
                super(p);
                ai1 = new Atom.Iterator.Singlet(a);
                ai2 = p.iteratorFactory().makeAtomIteratorDownNeighbor();
                this.reset();
            }
         }
        
        /**
         * Iterator for all atoms in a molecule with all atoms in a phase
         * The molecule may or may not be in the phase
         * Intramolecular pairs are not generated
         */
         // Needs to be fixed to handle multi-atom molecules
         public static class MP extends Iterator {
            private boolean upDone;
            private final Atom.Iterator aiUp, aiDown;
            private Atom.Iterator apiCurrent;
            private Molecule molecule;
            public MP(IteratorFactory factory) {
                super(factory.phase());
                aiUp = factory.makeAtomIteratorUpNeighbor();
                aiDown = factory.makeAtomIteratorDownNeighbor();
            }
            public MP(Phase p) {
                super(p);
                aiUp = p.iteratorFactory().makeAtomIteratorUpNeighbor();
                aiDown = p.iteratorFactory().makeAtomIteratorDownNeighbor();
        //        aiUp.setIntra(false);
        //        aiDown.setIntra(false);    (need to implement these methods in Atom.Iterator)
            }
            public MP(Phase p, Molecule m) {
                super(p);
                aiUp = p.iteratorFactory().makeAtomIteratorUpNeighbor();
                aiDown = p.iteratorFactory().makeAtomIteratorDownNeighbor();
        //        aiUp.setIntra(false);
        //        aiDown.setIntra(false);    (need to implement these methods in Atom.Iterator)
                reset(m);
            }
            public void reset() {reset(molecule);}
            public void reset(Molecule m) {
                molecule = m;
                ai1 = m.atomIterator;
                aiUp.reset(m.lastAtom());
                aiDown.reset(m.firstAtom());
                ai2 = aiUp;
                super.reset();
                if(hasNext) {
                    upDone = false;}
                else {
                    ai2 = aiDown;
                    super.reset();
                    upDone = true;
                }
            }
            public AtomPair next() {  //not handling intra/inter in well defined way
                AtomPair dummy = super.next();
                if(!hasNext && !upDone) {
                    ai2 = aiDown;
                    super.reset();
                    upDone = true;
                }
                return pair;   //this was set to proper value when super.next() was called
            }
            public void allPairs(AtomPair.Action act) {
                actionWrapper.pairAction = act;
                while(ai1.hasNext()) {
                    pair.atom1 = ai1.next();
                    aiUp.reset(molecule.lastAtom());
                    aiDown.reset(molecule.firstAtom());
                    aiUp.allAtoms(actionWrapper);
                    aiDown.allAtoms(actionWrapper);
                }
            }
        }  //end of MP 
    }  //end of class Iterator
    
    
    /**
     * Class for making linked lists of AtomPairs
     */
    public static final class Linker implements java.io.Serializable {
        private AtomPair pair;
        private AtomPair.Linker next;
        public Linker() {}
        public Linker(AtomPair p) {pair = p;}
        public Linker(AtomPair p, Linker l) {pair = p; next = l;}
        public final AtomPair pair() {return pair;}
        public final AtomPair.Linker next() {return next;}
        public final void setNext(AtomPair.Linker l) {next = l;}
        public final void setPair(AtomPair p) {pair = p;}
    } //end of Linker
    
}  //end of  AtomPair