/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package etomica.potential;

import etomica.api.IAtomList;
import etomica.api.IBoundary;
import etomica.api.IBox;
import etomica.api.IPotentialAtomic;
import etomica.space.ISpace;
import etomica.units.BohrRadius;
import etomica.units.ElectronVolt;

public class P2O2Bartolomei implements IPotentialAtomic {
    
//    public static void main (String [] args) {        
//        int is=0;
//        double thea=90.0;
//        double theb=90.0;
//        double phi=0.0;
//        double rr = BohrRadius.UNIT.toSim(5.0);
//        double thearad=Degree.UNIT.toSim(thea);
//        double thebrad=Degree.UNIT.toSim(theb);
//        double phirad=Degree.UNIT.toSim(phi);
//        double vpot = ElectronVolt.UNIT.fromSim(abicipeso4(is,rr,thearad,thebrad,phirad))*1E3;
//        System.out.println(BohrRadius.UNIT.fromSim(rr)+" "+thea+" "+theb+" "+phi+" "+vpot);
//
//}

    protected IBoundary boundary;
    protected final ISpace space;
    public static final double o2bl = BohrRadius.UNIT.toSim(2.28);
    protected static final boolean isPT2 = false;
    protected static final int nfctmx=101,npun=18,mxter=47,nbin = 100;           //<--- factoriales
    protected double [] fct = new double [nfctmx];
    protected static double [][] binom = new double [nbin][nbin];
    protected static final int [] lla = {0,2,0,2,2,2,4,0,4,2,4,2,4,2,4,4,4,4,4,6,0,6,2,6,2,6,2,6,4,6,4,6,4,6,8,0,8,2,8,2,8,4,8,4,8,6,8};
    protected static final int [] llb = {0,0,2,2,2,2,0,4,2,4,2,4,2,4,4,4,4,4,4,0,6,2,6,2,6,2,6,4,6,4,6,4,6,6,0,8,2,8,2,8,4,8,4,8,6,8,8};
    protected static final int [] ll = {0,2,2,0,2,4,4,4,2,2,4,4,6,6,0,2,4,6,8,6,6,4,4,6,6,8,8,6,6,8,8,10,10,12,8,8,8,8,10,10,4,4,12,12,14,14,16};
    protected static final double [] rfit = {4.50,5.00,5.50,6.00,6.25,6.50,7.00,7.25,7.50,8.00,8.25,8.50,9.00,10.00,12.00,14.00,16.00,19.00};
    protected static final double rfit0 = 19.00;
    protected static final double [] c6 = {62.39400,4.458600,4.458600,0.160,0.1913180,1.539733,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00};
    protected static final double [] c8 = {1834.400,517.7426,517.7426,10.84700,-16.69386,85.22080,-23.66100,-23.66100,-0.3892667,-0.3892667,-0.7316414,-0.7316414,-12.94054,-12.94054,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00};
    protected static final double [] cclec = {0.00,0.00,0.00,0.00,0.00,0.8479000E-01,0.00,0.00,0.00,0.00,0.00,0.00,-3.346200,-3.346200,0.00,0.00,0.00,0.00,253.2269,0.00,0.00,0.00,0.00,0.00,0.00,-24.16420,-24.16420,0.00,0.00,0.00,0.00,2983.596,2983.596,52060.48,0.00,0.00,0.00,0.00,-85.20790,-85.20790,0.00,0.00,15580.65,15580.65,377381.7,377381.7,3625362.0};
    protected static final double [][] sajmols = {{1449.280,621.7350,215.5190,56.81860,22.76780,4.143900,-9.624040,-10.97140,-10.81470,-8.779220,-7.579450,-6.455720,-4.595460,-2.321310,-0.6891450,-0.2473470,-0.9986980E-01,-0.3902788E-01},{805.1160,415.7900,166.1120,57.73700,32.40780,17.38980,3.834460,1.198600,-0.1584650,-1.012660,-1.036520,-0.9634770,-0.7323190,-0.3600880,-0.9286710E-01,-0.3010750E-01,-0.1152510E-01,-0.3408397E-02},{805.1160,415.7900,166.1120,57.73700,32.40780,17.38980,3.834460,1.198600,-0.1584650,-1.012660,-1.036520,-0.9634770,-0.7323190,-0.3600880,-0.9286710E-01,-0.3010750E-01,-0.1152510E-01,-0.3408397E-02},{-4.728660,45.03990,25.43910,10.66450,6.585390,3.969790,1.342790,0.7497730,0.4018540,0.8848300E-01,0.2832540E-01,-0.2418830E-02,-0.2179430E-01,-0.1535970E-01,-0.3557040E-02,-0.1148030E-02,-0.4545240E-03,-0.1099235E-03},{-77.02440,-90.95010,-44.25900,-17.58880,-10.68430,-6.375280,-2.143780,-1.206400,-0.6588900,-0.1692480,-0.7199570E-01,-0.2087340E-01,0.1484190E-01,0.1297480E-01,0.2020200E-02,0.3189000E-03,0.4567490E-06,-0.8391133E-04},{476.6900,271.7960,110.0630,38.91590,22.37200,12.57020,3.618740,1.801290,0.8059040,0.1674140E-01,-0.1032150,-0.1477140,-0.1427910,-0.7080460E-01,-0.1350940E-01,-0.2626990E-02,-0.2236860E-03,-0.9531591E-04},{177.0490,76.79700,26.58170,8.460280,4.636520,2.477040,0.6592810,0.3225290,0.1481950,0.2089440E-01,0.4263130E-02,-0.1427250E-02,-0.1494800E-02,0.1860930E-02,0.1017290E-02,0.2997790E-03,0.8473520E-04,0.3791012E-04},{177.0490,76.79700,26.58170,8.460280,4.636520,2.477040,0.6592810,0.3225290,0.1481950,0.2089440E-01,0.4263130E-02,-0.1427250E-02,-0.1494800E-02,0.1860930E-02,0.1017290E-02,0.2997790E-03,0.8473520E-04,0.3791012E-04},{-9.247530,8.084430,4.108120,1.618580,0.9697980,0.5671760,0.1760240,0.8806660E-01,0.4542770E-01,0.6483880E-02,0.1301510E-03,-0.2602470E-02,-0.3381170E-02,-0.1394420E-02,-0.2056410E-03,-0.4798550E-04,-0.1966940E-04,0.6236906E-06},{-9.247530,8.084430,4.108120,1.618580,0.9697980,0.5671760,0.1760240,0.8806660E-01,0.4542770E-01,0.6483880E-02,0.1301510E-03,-0.2602470E-02,-0.3381170E-02,-0.1394420E-02,-0.2056410E-03,-0.4798550E-04,-0.1966940E-04,0.6236906E-06},{-12.64100,-15.29470,-5.946410,-2.055310,-1.165400,-0.6480110,-0.1735120,-0.7969060E-01,-0.3671340E-01,-0.1390760E-02,0.3156330E-02,0.4591910E-02,0.3874350E-02,0.1163770E-02,0.1286550E-03,0.4286460E-04,0.7367220E-05,0.1172250E-05},{-12.64100,-15.29470,-5.946410,-2.055310,-1.165400,-0.6480110,-0.1735120,-0.7969060E-01,-0.3671340E-01,-0.1390760E-02,0.3156330E-02,0.4591910E-02,0.3874350E-02,0.1163770E-02,0.1286550E-03,0.4286460E-04,0.7367220E-05,0.1172250E-05},{203.7330,74.52100,24.09560,7.315700,3.911800,2.043280,0.4978760,0.2215980,0.8804980E-01,-0.8659920E-02,-0.2050680E-01,-0.2362090E-01,-0.2013930E-01,-0.9885890E-02,-0.2608120E-02,-0.9330820E-03,-0.3015960E-03,-0.8113200E-04},{203.7330,74.52100,24.09560,7.315700,3.911800,2.043280,0.4978760,0.2215980,0.8804980E-01,-0.8659920E-02,-0.2050680E-01,-0.2362090E-01,-0.2013930E-01,-0.9885890E-02,-0.2608120E-02,-0.9330820E-03,-0.3015960E-03,-0.8113200E-04},{-5.319980,-0.3534870,-0.4860800E-01,-0.1638340E-01,-0.1414260E-01,-0.2011800E-01,-0.1159420E-01,-0.1236770E-01,-0.7293260E-02,-0.2602480E-02,-0.1950350E-02,-0.1629210E-02,-0.1259250E-02,-0.5901710E-03,-0.5054740E-04,0.2943680E-05,-0.4297480E-05,-0.2029986E-05},{3.520170,-0.8050050,-0.2395040,-0.5345200E-01,-0.1201010E-01,0.9570530E-02,0.1271980E-01,0.1628180E-01,0.1124910E-01,0.5832290E-02,0.4490530E-02,0.3530110E-02,0.2251440E-02,0.7954020E-03,0.4188910E-04,-0.1351300E-04,0.1277660E-04,0.6035238E-05},{-2.636580,1.715210,0.2585980,-0.7077300E-02,-0.3851690E-01,-0.4629260E-01,-0.3785230E-01,-0.3365660E-01,-0.2233180E-01,-0.9681240E-02,-0.6713540E-02,-0.4796630E-02,-0.2660730E-02,-0.8396280E-03,-0.6823390E-04,0.1305470E-04,0.3323110E-04,0.1569726E-04},{-22.18380,-5.454590,-0.3358800,0.2459190,0.2560020,0.2184270,0.1246200,0.9457160E-01,0.6234380E-01,0.2720530E-01,0.1816180E-01,0.1227610E-01,0.5794340E-02,0.1301220E-02,0.2215610E-04,-0.5134840E-05,0.1024770E-05,0.4840671E-06},{-77.69300,-39.30690,-14.29910,-5.313360,-3.294360,-2.040570,-0.7736920,-0.4761790,-0.2811540,-0.9253660E-01,-0.5119070E-01,-0.2708630E-01,-0.5621980E-02,0.2196120E-02,0.8938440E-03,0.2568790E-03,0.6783110E-04,0.2135395E-04},{58.22350,17.14350,3.549630,0.7568250,0.3352650,0.1515680,0.8480280E-02,-0.2719880E-02,-0.1147770E-01,-0.8138780E-02,-0.6012660E-02,-0.4410430E-02,-0.1957790E-02,-0.3324390E-03,-0.6536760E-04,0.4762120E-04,0.8745130E-04,0.4130907E-04},{58.22350,17.14350,3.549630,0.7568250,0.3352650,0.1515680,0.8480280E-02,-0.2719880E-02,-0.1147770E-01,-0.8138780E-02,-0.6012660E-02,-0.4410430E-02,-0.1957790E-02,-0.3324390E-03,-0.6536760E-04,0.4762120E-04,0.8745130E-04,0.4130907E-04},{-4.072040,2.699130,0.6435200,0.1711920,0.9382210E-01,0.4711470E-01,0.1357660E-01,0.4714440E-02,0.2705070E-03,-0.1353790E-02,-0.1546340E-02,-0.1560770E-02,-0.1237810E-02,-0.4711520E-03,-0.9160200E-04,-0.2215520E-04,-0.1088670E-04,-0.5142513E-05},{-4.072040,2.699130,0.6435200,0.1711920,0.9382210E-01,0.4711470E-01,0.1357660E-01,0.4714440E-02,0.2705070E-03,-0.1353790E-02,-0.1546340E-02,-0.1560770E-02,-0.1237810E-02,-0.4711520E-03,-0.9160200E-04,-0.2215520E-04,-0.1088670E-04,-0.5142513E-05},{-12.77340,-5.946590,-1.043350,-0.2166470,-0.9959080E-01,-0.3736660E-01,-0.4982290E-02,0.1743260E-02,0.4534700E-02,0.4292780E-02,0.3628990E-02,0.2968620E-02,0.1863010E-02,0.5302780E-03,0.5885770E-04,0.4710510E-05,-0.3205140E-05,-0.1514001E-05},{-12.77340,-5.946590,-1.043350,-0.2166470,-0.9959080E-01,-0.3736660E-01,-0.4982290E-02,0.1743260E-02,0.4534700E-02,0.4292780E-02,0.3628990E-02,0.2968620E-02,0.1863010E-02,0.5302780E-03,0.5885770E-04,0.4710510E-05,-0.3205140E-05,-0.1514001E-05},{110.2930,21.73900,3.990920,0.8334510,0.3703310,0.1546240,0.1149390E-01,-0.4720150E-02,-0.1290740E-01,-0.1057250E-01,-0.8738320E-02,-0.7016010E-02,-0.4418560E-02,-0.1547230E-02,-0.2323570E-03,-0.5620620E-04,-0.3443860E-04,-0.2037703E-05},{110.2930,21.73900,3.990920,0.8334510,0.3703310,0.1546240,0.1149390E-01,-0.4720150E-02,-0.1290740E-01,-0.1057250E-01,-0.8738320E-02,-0.7016010E-02,-0.4418560E-02,-0.1547230E-02,-0.2323570E-03,-0.5620620E-04,-0.3443860E-04,-0.2037703E-05},{4.219030,1.664610,0.1622730,0.1580670E-01,0.6990850E-03,-0.1010380E-02,-0.5064570E-02,-0.5336680E-02,-0.3898930E-02,-0.1926400E-02,-0.1582280E-02,-0.1312490E-02,-0.9521040E-03,-0.4184150E-03,-0.6140650E-04,-0.1520200E-04,-0.2144500E-04,-0.1012990E-04},{4.219030,1.664610,0.1622730,0.1580670E-01,0.6990850E-03,-0.1010380E-02,-0.5064570E-02,-0.5336680E-02,-0.3898930E-02,-0.1926400E-02,-0.1582280E-02,-0.1312490E-02,-0.9521040E-03,-0.4184150E-03,-0.6140650E-04,-0.1520200E-04,-0.2144500E-04,-0.1012990E-04},{-20.20130,-3.122090,-0.4804160E-01,0.9798090E-01,0.8127930E-01,0.7035040E-01,0.3048840E-01,0.2207780E-01,0.1421430E-01,0.5707480E-02,0.3778260E-02,0.2577780E-02,0.1361120E-02,0.4385660E-03,0.3099080E-04,0.1837700E-05,-0.7198240E-05,-0.3400208E-05},{-20.20130,-3.122090,-0.4804160E-01,0.9798090E-01,0.8127930E-01,0.7035040E-01,0.3048840E-01,0.2207780E-01,0.1421430E-01,0.5707480E-02,0.3778260E-02,0.2577780E-02,0.1361120E-02,0.4385660E-03,0.3099080E-04,0.1837700E-05,-0.7198240E-05,-0.3400208E-05},{-38.09740,-25.78320,-7.743330,-2.321820,-1.315470,-0.7644990,-0.2558710,-0.1501550,-0.8765950E-01,-0.2818520E-01,-0.1589540E-01,-0.8854570E-02,-0.2827200E-02,-0.3884840E-03,0.1318620E-04,-0.9861070E-05,0.9746190E-05,0.6969493E-06},{-38.09740,-25.78320,-7.743330,-2.321820,-1.315470,-0.7644990,-0.2558710,-0.1501550,-0.8765950E-01,-0.2818520E-01,-0.1589540E-01,-0.8854570E-02,-0.2827200E-02,-0.3884840E-03,0.1318620E-04,-0.9861070E-05,0.9746190E-05,0.6969493E-06},{-56.60990,-26.18760,-5.615360,-1.272540,-0.6423440,-0.3250150,-0.9611450E-01,-0.4684230E-01,-0.2682910E-01,-0.4404090E-02,-0.1398060E-02,-0.1167520E-03,0.2924600E-03,-0.1884900E-04,0.2244600E-04,0.1975920E-04,0.1432040E-04,0.3368699E-07},{12.35490,3.597470,0.5250660,0.7889040E-01,0.2726610E-01,0.1881520E-02,-0.2022670E-02,0.1822070E-02,-0.2296650E-02,-0.1811900E-02,-0.1329930E-02,-0.1111500E-02,-0.5438110E-03,-0.1373740E-03,-0.4448190E-04,0.5667410E-04,0.4272730E-04,0.2018295E-04},{12.35490,3.597470,0.5250660,0.7889040E-01,0.2726610E-01,0.1881520E-02,-0.2022670E-02,0.1822070E-02,-0.2296650E-02,-0.1811900E-02,-0.1329930E-02,-0.1111500E-02,-0.5438110E-03,-0.1373740E-03,-0.4448190E-04,0.5667410E-04,0.4272730E-04,0.2018295E-04},{0.8312450,-1.444070,-0.1930390,-0.2910840E-01,-0.1115390E-01,-0.6397220E-03,0.9020550E-03,-0.1644330E-02,0.2975580E-03,0.8325160E-05,-0.6372970E-05,0.9715860E-05,-0.2896970E-04,-0.8386440E-04,-0.5269640E-04,-0.1468430E-04,-0.2530190E-05,-0.1195177E-05},{0.8312450,-1.444070,-0.1930390,-0.2910840E-01,-0.1115390E-01,-0.6397220E-03,0.9020550E-03,-0.1644330E-02,0.2975580E-03,0.8325160E-05,-0.6372970E-05,0.9715860E-05,-0.2896970E-04,-0.8386440E-04,-0.5269640E-04,-0.1468430E-04,-0.2530190E-05,-0.1195177E-05},{45.44620,6.554920,0.7577400,0.1106700,0.4099340E-01,0.6731840E-02,-0.2297620E-02,0.7273330E-03,-0.1326890E-02,0.1527020E-03,0.1466910E-03,0.1011980E-03,-0.5651440E-04,-0.1267100E-03,-0.4491670E-04,0.7531830E-05,0.1178900E-04,-0.1990403E-07},{45.44620,6.554920,0.7577400,0.1106700,0.4099340E-01,0.6731840E-02,-0.2297620E-02,0.7273330E-03,-0.1326890E-02,0.1527020E-03,0.1466910E-03,0.1011980E-03,-0.5651440E-04,-0.1267100E-03,-0.4491670E-04,0.7531830E-05,0.1178900E-04,-0.1990403E-07},{0.5035250,0.9528360,0.1667880,0.3526630E-01,0.1545590E-01,0.6797540E-02,0.3184310E-02,0.3274640E-02,0.5396500E-03,-0.1961710E-03,-0.1782140E-03,-0.1666660E-03,-0.1197600E-03,-0.3402550E-04,0.3496600E-05,0.5246950E-05,-0.1491170E-04,-0.7043788E-05},{0.5035250,0.9528360,0.1667880,0.3526630E-01,0.1545590E-01,0.6797540E-02,0.3184310E-02,0.3274640E-02,0.5396500E-03,-0.1961710E-03,-0.1782140E-03,-0.1666660E-03,-0.1197600E-03,-0.3402550E-04,0.3496600E-05,0.5246950E-05,-0.1491170E-04,-0.7043788E-05},{3.790500,-6.463790,-1.715190,-0.4309930,-0.2298420,-0.1173520,-0.4004400E-01,-0.2386420E-01,-0.1385670E-01,-0.4874920E-02,-0.2974870E-02,-0.1761810E-02,-0.7192830E-03,-0.1932420E-03,-0.1589820E-04,-0.2530650E-04,-0.1838750E-04,0.1008184E-07},{3.790500,-6.463790,-1.715190,-0.4309930,-0.2298420,-0.1173520,-0.4004400E-01,-0.2386420E-01,-0.1385670E-01,-0.4874920E-02,-0.2974870E-02,-0.1761810E-02,-0.7192830E-03,-0.1932420E-03,-0.1589820E-04,-0.2530650E-04,-0.1838750E-04,0.1008184E-07},{-19.97870,-10.47470,-1.776950,-0.3191940,-0.1461770,-0.7750710E-01,-0.1801760E-01,-0.7700710E-02,-0.6126920E-02,-0.1779380E-02,-0.9319680E-03,-0.4634340E-03,-0.1365240E-03,-0.3880700E-04,-0.1070710E-04,0.7784690E-06,0.4875890E-05,0.6764374E-09},{-19.97870,-10.47470,-1.776950,-0.3191940,-0.1461770,-0.7750710E-01,-0.1801760E-01,-0.7700710E-02,-0.6126920E-02,-0.1779380E-02,-0.9319680E-03,-0.4634340E-03,-0.1365240E-03,-0.3880700E-04,-0.1070710E-04,0.7784690E-06,0.4875890E-05,0.6764374E-09},{-0.2126500,-4.937570,-0.7575950,-0.1038130,-0.4202650E-01,-0.9127630E-02,0.1881530E-02,0.3422820E-02,0.4275470E-03,0.6813530E-04,0.1328800E-03,0.9574740E-04,0.4401260E-04,0.1609500E-04,0.3858850E-04,0.3421280E-04,0.2285660E-04,0.1800077E-10}};
    protected static final double [] sajp1 = {-1655.090,-778.6520,-778.6520,99.53712,-27.85140,-409.7880,-200.5040,-200.5040,34.66392,34.66392,-5.307400,-5.307400,-258.4240,-258.4240,9.932986,-8.650350,8.703580,33.45842,76.77220,-82.16000,-82.16000,13.54234,13.54234,13.65362,13.65362,-177.1080,-177.1080,-5.108840,-5.108840,34.15842,34.15842,24.62840,24.62840,60.84460,-17.51486,-17.51486,-4.550630,-4.550630,-77.78256,-77.78256,0.8986220,0.8986220,-20.50858,-20.50858,19.00800,19.00800,-9.449840};
    protected static final double [] sajpn = {0.1263397E-01,0.1163656E-02,0.1163656E-02,0.3654207E-04,0.2368282E-04,0.9351529E-04,-0.1596215E-04,-0.1596215E-04,-0.2626066E-06,-0.2626066E-06,-0.4935790E-06,-0.4935790E-06,0.2879949E-04,0.2879949E-04,0.5074965E-06,-0.1508810E-05,-0.3924315E-05,-0.1210168E-06,-0.1011503E-04,-0.1032727E-04,-0.1032727E-04,0.1285628E-05,0.1285628E-05,0.3785002E-06,0.3785002E-06,0.9652276E-06,0.9652276E-06,0.2532475E-05,0.2532475E-05,0.8500520E-06,0.8500520E-06,-0.4034970E-06,-0.4034970E-06,-0.2304899E-07,-0.5045737E-05,-0.5045737E-05,0.2987943E-06,0.2987943E-06,0.1152339E-07,0.1152339E-07,0.1760947E-05,0.1760947E-05,-0.6898098E-08,-0.6898098E-08,-0.5340296E-09,-0.5340296E-09,-0.1610595E-10};
    protected static final double [] saa = {0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,-0.4297480E-05,0.1277660E-04,0.3323110E-04,0.1024770E-05,0.00,0.8745130E-04,0.8745130E-04,-0.1088670E-04,-0.1088670E-04,-0.3205140E-05,-0.3205140E-05,0.00,0.00,-0.2144500E-04,-0.2144500E-04,-0.7198240E-05,-0.7198240E-05,0.00,0.00,0.00,0.4272730E-04,0.4272730E-04,-0.2530190E-05,-0.2530190E-05,0.00,0.00,-0.1491170E-04,-0.1491170E-04,0.00,0.00,0.00,0.00,0.00};
    protected static final double [] sbet = {0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,0.250,0.250,  0.250,0.250, 0.00,0.250,  0.250,0.250,0.250,0.250,  0.250, 0.00, 0.00,0.250,  0.250,0.250,0.250, 0.00, 0.00, 0.00,0.250,0.250,  0.250,0.250, 0.00, 0.00,  0.250,0.250, 0.00, 0.00, 0.00, 0.00, 0.00};
    protected static final double [][] tajmols = {{1561.240, 667.8750, 230.5240, 61.70780, 25.59600, 5.790940,-9.056880,-10.63640,  -10.61670,-8.709300,-7.537970,-6.431150,  -4.586870,-2.320290, -0.6891320, -0.2473470, -0.9986980E-01, -0.3902788E-01},{881.1830, 444.7920, 174.5550, 60.27010, 33.83630, 18.20630, 4.108510, 1.358830, -0.6420170E-01, -0.9798210,-1.017140, -0.9520410, -0.7283370, -0.3596060, -0.9286000E-01, -0.3010740E-01, -0.1152510E-01, -0.3408397E-02},{881.1830, 444.7920, 174.5550, 60.27010, 33.83630, 18.20630, 4.108510, 1.358830, -0.6420170E-01, -0.9798210,-1.017140, -0.9520410, -0.7283370, -0.3596060, -0.9286000E-01, -0.3010740E-01, -0.1152510E-01, -0.3408397E-02},{22.41270, 52.31650, 27.32180, 11.20680, 6.891820, 4.147300, 1.404930,0.7872220,  0.4242470,0.9697890E-01,0.3353970E-01,0.7746990E-03, -0.2060300E-01, -0.1519700E-01, -0.3554160E-02, -0.1147980E-02, -0.4545230E-03, -0.1099235E-03},{ -94.82270,-96.70660,-45.68460,-17.92530,  -10.85690,-6.466700,-2.171410,-1.222380, -0.6681910, -0.1687250, -0.7146530E-01, -0.2053890E-01,  0.1493700E-01,0.1298040E-01,0.2020220E-02,0.3189000E-03,  0.4567490E-06, -0.8391133E-04},{554.7170, 295.7870, 115.8480, 40.41030, 23.17530, 13.01420, 3.762170, 1.884620,  0.8547090,0.3429140E-01, -0.9278330E-01, -0.1415430, -0.1406570, -0.7055850E-01, -0.1350650E-01, -0.2626950E-02, -0.2236860E-03, -0.9531591E-04},{182.3190, 74.61270, 25.12630, 7.785190, 4.193780, 2.189160,0.5386400,0.2446730,  0.9788560E-01, -0.2669600E-03, -0.9450570E-02, -0.1031000E-01, -0.5216520E-02,0.1210860E-02,0.9977900E-03,0.2992040E-03,  0.8471850E-04,0.3791012E-04},{182.3190, 74.61270, 25.12630, 7.785190, 4.193780, 2.189160,0.5386400,0.2446730,  0.9788560E-01, -0.2669600E-03, -0.9450570E-02, -0.1031000E-01, -0.5216520E-02,0.1210860E-02,0.9977900E-03,0.2992040E-03,  0.8471850E-04,0.3791012E-04},{8.687370, 8.968090, 3.917410, 1.498400,  0.8872110,0.5120400,0.1523130,0.7253480E-01,  0.3572430E-01,0.2514950E-02, -0.2407900E-02, -0.4225400E-02, -0.4044640E-02, -0.1505220E-02, -0.2087230E-03, -0.4807090E-04, -0.1967180E-04,0.6236906E-06},{8.687370, 8.968090, 3.917410, 1.498400,  0.8872110,0.5120400,0.1523130,0.7253480E-01,  0.3572430E-01,0.2514950E-02, -0.2407900E-02, -0.4225400E-02, -0.4044640E-02, -0.1505220E-02, -0.2087230E-03, -0.4807090E-04, -0.1967180E-04,0.6236906E-06},{ -7.407380,-12.99830,-5.755700,-2.030870,  -1.149990, -0.6357740, -0.1655690, -0.7340210E-01, -0.3186490E-01,0.1332970E-02,0.5195880E-02,0.6118240E-02,  0.4727770E-02,0.1429000E-02,0.1537820E-03,0.4519830E-04,  0.7580760E-05,0.1172250E-05},{ -7.407380,-12.99830,-5.755700,-2.030870,  -1.149990, -0.6357740, -0.1655690, -0.7340210E-01, -0.3186490E-01,0.1332970E-02,0.5195880E-02,0.6118240E-02,  0.4727770E-02,0.1429000E-02,0.1537820E-03,0.4519830E-04,  0.7580760E-05,0.1172250E-05},{202.8350, 72.96760, 22.76150, 6.629900, 3.465380, 1.758990,0.3854020,0.1512390,  0.4349190E-01, -0.2649970E-01, -0.3178920E-01, -0.3075400E-01, -0.2298790E-01, -0.1033870E-01, -0.2619430E-02, -0.9333610E-03, -0.3016030E-03, -0.8113200E-04},{202.8350, 72.96760, 22.76150, 6.629900, 3.465380, 1.758990,0.3854020,0.1512390,  0.4349190E-01, -0.2649970E-01, -0.3178920E-01, -0.3075400E-01, -0.2298790E-01, -0.1033870E-01, -0.2619430E-02, -0.9333610E-03, -0.3016030E-03, -0.8113200E-04},{4.781750, 1.066550,0.1502230,0.3486510E-01,  0.1776870E-01,0.1465820E-02, -0.5946600E-03, -0.4414570E-02, -0.1705340E-02,0.2479270E-03, -0.1957840E-03, -0.5882280E-03, -0.9122820E-03, -0.5545280E-03, -0.5019120E-04,0.2947220E-05, -0.4297450E-05, -0.2029972E-05},{ -5.311700,-1.058900, -0.2540820, -0.7167330E-01, -0.3002850E-01, -0.6628670E-02,0.2107350E-02,0.8494500E-02,  0.5994570E-02,0.3427700E-02,0.2864800E-02,0.2431370E-02,  0.1750090E-02,0.6914200E-03,0.3747400E-04, -0.1369790E-04,  0.1276890E-04,0.6031601E-05},{ -4.551810,-1.010970,0.4626070E-01,0.2755170E-01,  0.4532130E-02, -0.8013060E-02, -0.1522630E-01, -0.1709630E-01, -0.1061730E-01, -0.4094920E-02, -0.2912000E-02, -0.2229010E-02, -0.1510260E-02, -0.6201770E-03, -0.6113880E-04,0.1326600E-04,  0.3323710E-04,0.1570009E-04},{18.03680, 2.867820,0.8343230E-01,0.7697880E-01,  0.9473370E-01,0.9126700E-01,0.5863350E-01,0.4927460E-01,  0.3106160E-01,0.1303900E-01,0.8649950E-02,0.5898160E-02,  0.2937220E-02,0.7349970E-03,0.7430560E-06, -0.5916520E-05,  0.9969210E-06,0.4709121E-06},{ -33.77500,-12.02540,-4.567170,-1.939270,  -1.259690, -0.8010950, -0.3057600, -0.1869070, -0.1017890, -0.2323660E-01, -0.8123830E-02, -0.3264220E-03,  0.4705520E-02,0.3731940E-02,0.9276200E-03,0.2576170E-03,  0.6784720E-04,0.2135395E-04},{55.57870, 14.29190, 2.682380,0.4981960,  0.1872950,0.6527880E-01, -0.2236780E-01, -0.2148060E-01, -0.2294440E-01, -0.1244430E-01, -0.8649000E-02, -0.6023880E-02, -0.2561120E-02, -0.4161820E-03, -0.6692030E-04,0.4759460E-04,  0.8745090E-04,0.4130888E-04},{55.57870, 14.29190, 2.682380,0.4981960,  0.1872950,0.6527880E-01, -0.2236780E-01, -0.2148060E-01, -0.2294440E-01, -0.1244430E-01, -0.8649000E-02, -0.6023880E-02, -0.2561120E-02, -0.4161820E-03, -0.6692030E-04,0.4759460E-04,  0.8745090E-04,0.4130888E-04},{4.700950, 2.952290,0.5437100,0.1397610,  0.7606750E-01,0.3669230E-01,0.9705800E-02,0.2003180E-02, -0.1358280E-02, -0.1319650E-02, -0.1240540E-02, -0.1141460E-02, -0.8006430E-03, -0.1858630E-03, -0.1588630E-06,0.6315620E-05, -0.2030260E-05, -0.9590269E-06},{4.700950, 2.952290,0.5437100,0.1397610,  0.7606750E-01,0.3669230E-01,0.9705800E-02,0.2003180E-02, -0.1358280E-02, -0.1319650E-02, -0.1240540E-02, -0.1141460E-02, -0.8006430E-03, -0.1858630E-03, -0.1588630E-06,0.6315620E-05, -0.2030260E-05, -0.9590269E-06},{ -4.242420,-2.712670, -0.6394690, -0.1575640, -0.7378390E-01, -0.2476000E-01, -0.1204640E-02,0.4000160E-02,  0.5882650E-02,0.4936980E-02,0.3918130E-02,0.3098250E-02,  0.1889060E-02,0.5313300E-03,0.5885940E-04,0.4710510E-05, -0.3205140E-05, -0.1514001E-05},{ -4.242420,-2.712670, -0.6394690, -0.1575640, -0.7378390E-01, -0.2476000E-01, -0.1204640E-02,0.4000160E-02,  0.5882650E-02,0.4936980E-02,0.3918130E-02,0.3098250E-02,  0.1889060E-02,0.5313300E-03,0.5885940E-04,0.4710510E-05, -0.3205140E-05, -0.1514001E-05},{91.70160, 18.29890, 3.200480,0.5631550,  0.2121100,0.6169580E-01, -0.2094910E-01, -0.2415980E-01, -0.2417570E-01, -0.1466090E-01, -0.1116860E-01, -0.8450850E-02, -0.4910480E-02, -0.1602350E-02, -0.2329760E-03, -0.5621260E-04, -0.3443870E-04, -0.2037703E-05},{91.70160, 18.29890, 3.200480,0.5631550,  0.2121100,0.6169580E-01, -0.2094910E-01, -0.2415980E-01, -0.2417570E-01, -0.1466090E-01, -0.1116860E-01, -0.8450850E-02, -0.4910480E-02, -0.1602350E-02, -0.2329760E-03, -0.5621260E-04, -0.3443870E-04, -0.2037703E-05},{ -2.048110,-1.452110, -0.1140560, -0.9699460E-02, -0.5902540E-02, -0.1038050E-02, -0.3261110E-02, -0.3684830E-02, -0.2738130E-02, -0.1234040E-02, -0.1048970E-02, -0.9023420E-03, -0.7105430E-03, -0.3358150E-03, -0.5215240E-04, -0.1420520E-04, -0.2134050E-04, -0.1008054E-04},{ -2.048110,-1.452110, -0.1140560, -0.9699460E-02, -0.5902540E-02, -0.1038050E-02, -0.3261110E-02, -0.3684830E-02, -0.2738130E-02, -0.1234040E-02, -0.1048970E-02, -0.9023420E-03, -0.7105430E-03, -0.3358150E-03, -0.5215240E-04, -0.1420520E-04, -0.2134050E-04, -0.1008054E-04},{12.96300, 3.786170,0.4327200,0.9742690E-01,  0.5922170E-01,0.4808840E-01,0.1773480E-01,0.1329620E-01,  0.8571570E-02,0.3598560E-02,0.2500760E-02,0.1809800E-02,  0.1091660E-02,0.4118490E-03,0.3175420E-04,0.1926270E-05, -0.7192860E-05, -0.3397666E-05},{12.96300, 3.786170,0.4327200,0.9742690E-01,  0.5922170E-01,0.4808840E-01,0.1773480E-01,0.1329620E-01,  0.8571570E-02,0.3598560E-02,0.2500760E-02,0.1809800E-02,  0.1091660E-02,0.4118490E-03,0.3175420E-04,0.1926270E-05, -0.7192860E-05, -0.3397666E-05},{ -18.20740,-9.311340,-3.074910,-1.031620, -0.6004890, -0.3578160, -0.1176410, -0.6827440E-01, -0.3924980E-01, -0.1097820E-01, -0.5638820E-02, -0.2741670E-02, -0.6567430E-03, -0.1153350E-03,0.1747820E-04, -0.9794480E-05,  0.9747210E-05,0.6969493E-06},{ -18.20740,-9.311340,-3.074910,-1.031620, -0.6004890, -0.3578160, -0.1176410, -0.6827440E-01, -0.3924980E-01, -0.1097820E-01, -0.5638820E-02, -0.2741670E-02, -0.6567430E-03, -0.1153350E-03,0.1747820E-04, -0.9794480E-05,  0.9747210E-05,0.6969493E-06},{ -18.34250,-6.638880,-1.745660, -0.4958270, -0.2647530, -0.1326040, -0.4081470E-01, -0.1614250E-01, -0.9392390E-02,0.1411860E-02,0.1862060E-02,0.1685920E-02,  0.8272210E-03,0.2468580E-04,0.2269300E-04,0.1976050E-04,  0.1432040E-04,0.3368699E-07},{9.142050, 2.660310,0.3291610,0.3678240E-01,  0.6300830E-02, -0.9168380E-02, -0.5710110E-02, -0.4820280E-03, -0.3462970E-02, -0.2170060E-02, -0.1469580E-02, -0.1164940E-02, -0.5515560E-03, -0.1375360E-03, -0.4448200E-04,0.5667410E-04,  0.4272730E-04,0.2018295E-04},{9.142050, 2.660310,0.3291610,0.3678240E-01,  0.6300830E-02, -0.9168380E-02, -0.5710110E-02, -0.4820280E-03, -0.3462970E-02, -0.2170060E-02, -0.1469580E-02, -0.1164940E-02, -0.5515560E-03, -0.1375360E-03, -0.4448200E-04,0.5667410E-04,  0.4272730E-04,0.2018295E-04},{2.554490, -0.3561810, -0.7682870E-01, -0.1607500E-01, -0.6212840E-02,0.1282860E-02,0.1266600E-02, -0.1389670E-02,  0.4249200E-03,0.1156760E-03,0.9168400E-04,0.9902390E-04,  0.4455030E-04, -0.3524440E-04, -0.3282740E-04, -0.7022280E-05,  0.3165130E-06,0.1495102E-06},{2.554490, -0.3561810, -0.7682870E-01, -0.1607500E-01, -0.6212840E-02,0.1282860E-02,0.1266600E-02, -0.1389670E-02,  0.4249200E-03,0.1156760E-03,0.9168400E-04,0.9902390E-04,  0.4455030E-04, -0.3524440E-04, -0.3282740E-04, -0.7022280E-05,  0.3165130E-06,0.1495102E-06},{25.61920, 4.565930,0.5383100,0.6074940E-01,  0.1511970E-01, -0.6905360E-02, -0.6299130E-02, -0.1410900E-02, -0.2805290E-02, -0.5455880E-03, -0.3320990E-03, -0.2265140E-03, -0.2091530E-03, -0.1588640E-03, -0.4606760E-04,0.7523710E-05,  0.1179320E-04, -0.1990403E-07},{25.61920, 4.565930,0.5383100,0.6074940E-01,  0.1511970E-01, -0.6905360E-02, -0.6299130E-02, -0.1410900E-02, -0.2805290E-02, -0.5455880E-03, -0.3320990E-03, -0.2265140E-03, -0.2091530E-03, -0.1588640E-03, -0.4606760E-04,0.7523710E-05,  0.1179320E-04, -0.1990403E-07},{ 0.6112550, -0.6257430, -0.5608980E-01,0.3092250E-02,  0.1687070E-02,0.4248600E-03,0.1480370E-02,0.2325420E-02, -0.8304590E-04,0.3873840E-06,0.2717210E-04,0.2859200E-04,  0.5014220E-04,0.9334950E-04,0.7505770E-04,0.4545090E-04,  0.7675480E-05,0.3625640E-05},{ 0.6112550, -0.6257430, -0.5608980E-01,0.3092250E-02,  0.1687070E-02,0.4248600E-03,0.1480370E-02,0.2325420E-02, -0.8304590E-04,0.3873840E-06,0.2717210E-04,0.2859200E-04,  0.5014220E-04,0.9334950E-04,0.7505770E-04,0.4545090E-04,  0.7675480E-05,0.3625640E-05},{3.851810,0.2517440, -0.3563630, -0.1580690, -0.9647940E-01, -0.4874060E-01, -0.1983780E-01, -0.1253580E-01, -0.7271950E-02, -0.2517040E-02, -0.1565720E-02, -0.9204420E-03, -0.4202260E-03, -0.1559880E-03, -0.1536590E-04, -0.2530040E-04, -0.1838740E-04,0.1008184E-07},{3.851810,0.2517440, -0.3563630, -0.1580690, -0.9647940E-01, -0.4874060E-01, -0.1983780E-01, -0.1253580E-01, -0.7271950E-02, -0.2517040E-02, -0.1565720E-02, -0.9204420E-03, -0.4202260E-03, -0.1559880E-03, -0.1536590E-04, -0.2530040E-04, -0.1838740E-04,0.1008184E-07},{4.704700, 1.184740, -0.1217070, -0.7611340E-01, -0.4422660E-01, -0.3178910E-01, -0.7391150E-02, -0.2309010E-02, -0.3290230E-02, -0.9987870E-03, -0.5273680E-03, -0.2558620E-03, -0.8412920E-04, -0.3648620E-04, -0.1075480E-04,0.7770760E-06,  0.4875860E-05,0.6764374E-09},{4.704700, 1.184740, -0.1217070, -0.7611340E-01, -0.4422660E-01, -0.3178910E-01, -0.7391150E-02, -0.2309010E-02, -0.3290230E-02, -0.9987870E-03, -0.5273680E-03, -0.2558620E-03, -0.8412920E-04, -0.3648620E-04, -0.1075480E-04,0.7770760E-06,  0.4875860E-05,0.6764374E-09},{1.272140, -0.1828870E-01, -0.2415990, -0.4954790E-01, -0.2355280E-01, -0.3790030E-02, -0.8101360E-03,0.2085900E-02, -0.1841900E-03, -0.5228050E-04,0.7986610E-04,0.7243470E-04,  0.3950870E-04,0.1592700E-04,0.3858820E-04,0.3421280E-04,  0.2285660E-04,0.1800077E-10}};
    protected static final double [] tajp1 = {-1786.730,-872.7820,-872.7820, 59.80760,  -3.767800,-517.8600,-215.4126,-215.4126,  0.5614400,0.5614400,-11.18184,-11.18184,  -259.7348,-259.7348,-7.430400, 8.505600, 7.081680,-30.33796, 43.49920,-82.57360,  -82.57360,-3.497320,-3.497320, 3.059500, 3.059500,-146.8054,-146.8054, 1.192000, 1.192000,-18.35366,-18.35366, 17.79212, 17.79212, 23.40724,-12.96348,-12.96348,  -5.821342,-5.821342,-42.10654,-42.10654,  -2.473996,-2.473996,-7.200132,-7.200132,  -7.039920,-7.039920,-2.580857};
    protected static final double [] tajpn = {0.1263397E-01,0.1163656E-02,0.1163656E-02,0.3654207E-04,  0.2368282E-04,0.9351529E-04, -0.1596215E-04, -0.1596215E-04, -0.2626066E-06, -0.2626066E-06, -0.4935790E-06, -0.4935790E-06,  0.2879949E-04,0.2879949E-04,0.5074929E-06, -0.1507900E-05, -0.3925024E-05, -0.1177280E-06, -0.1011503E-04, -0.1032722E-04, -0.1032722E-04,0.2397567E-06,0.2397567E-06,0.3785002E-06,  0.3785002E-06,0.9652276E-06,0.9652276E-06,0.2520135E-05,  0.2520135E-05,0.8494166E-06,0.8494166E-06, -0.4034970E-06, -0.4034970E-06, -0.2304899E-07, -0.5045737E-05, -0.5045737E-05, -0.3737754E-07, -0.3737754E-07,0.1152339E-07,0.1152339E-07, -0.9064100E-06, -0.9064100E-06, -0.6898098E-08, -0.6898098E-08, -0.5340296E-09, -0.5340296E-09, -0.1610595E-10};
    protected static final double [] taa = {0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, -0.4297450E-05,0.1276890E-04,  0.3323710E-04,0.9969210E-06, 0.00,0.8745090E-04,  0.8745090E-04, -0.2030260E-05, -0.2030260E-05, -0.3205140E-05, -0.3205140E-05, 0.00, 0.00, -0.2134050E-04, -0.2134050E-04, -0.7192860E-05, -0.7192860E-05, 0.00, 0.00, 0.00,0.4272730E-04,0.4272730E-04,  0.3165130E-06,0.3165130E-06, 0.00, 0.00,  0.7675480E-05,0.7675480E-05, 0.00, 0.00, 0.00, 0.00, 0.00};
    protected static final double [] tbet = {0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,0.250,0.250,  0.250,0.250, 0.00,0.250,  0.250,0.250,0.250,0.250,  0.250, 0.00, 0.00,0.250,  0.250,0.250,0.250, 0.00, 0.00, 0.00,0.250,0.250,  0.250,0.250, 0.00, 0.00,  0.250,0.250, 0.00, 0.00, 0.00, 0.00, 0.00};
    protected static final double [][] qajmols = {{2063.480, 780.4540, 260.3830, 70.87380, 30.80740, 8.783430,-8.047240,-10.04220,  -10.26170,-8.572940,-7.453460,-6.378770,  -4.566750,-2.317320, -0.6890680, -0.2473450, -0.9986980E-01, -0.3902788E-01},{1217.610, 512.6030, 190.6780, 64.95700, 36.45820, 19.69390, 4.600060, 1.643830,  0.1016580, -0.9228600, -0.9837570, -0.9324790, -0.7216180, -0.3588130, -0.9284900E-01, -0.3010730E-01, -0.1152510E-01, -0.3408397E-02},{1217.610, 512.6030, 190.6780, 64.95700, 36.45820, 19.69390, 4.600060, 1.643830,  0.1016580, -0.9228600, -0.9837570, -0.9324790, -0.7216180, -0.3588130, -0.9284900E-01, -0.3010730E-01, -0.1152510E-01, -0.3408397E-02},{91.28480, 66.84110, 30.63720, 12.19190, 7.454660, 4.474480, 1.518670,0.8545440,  0.4640340,0.1102610,0.4121350E-01,0.5208420E-02, -0.1912290E-01, -0.1503200E-01, -0.3552110E-02, -0.1147960E-02, -0.4545230E-03, -0.1099235E-03},{ -184.1220,-112.0520,-48.26380,-18.50010,  -11.14460,-6.613520,-2.209760,-1.240720, -0.6761700, -0.1705980, -0.7237330E-01, -0.2097900E-01,  0.1483370E-01,0.1297470E-01,0.2020200E-02,0.3189000E-03,  0.4567490E-06, -0.8391133E-04},{761.5850, 335.5620, 124.8260, 42.93050, 24.56310, 13.78950, 4.009980, 2.025000,  0.9337010,0.5732080E-01, -0.8034870E-01, -0.1348290, -0.1386990, -0.7039210E-01, -0.1350530E-01, -0.2626940E-02, -0.2236860E-03, -0.9531591E-04},{121.9850, 60.95740, 21.30200, 6.411030, 3.334740, 1.645940,0.3185610,0.1041970,  0.8443940E-02, -0.3576110E-01, -0.3181020E-01, -0.2439550E-01, -0.1080620E-01,0.3305830E-03,0.9759580E-03,0.2986620E-03,  0.8470510E-04,0.3791012E-04},{121.9850, 60.95740, 21.30200, 6.411030, 3.334740, 1.645940,0.3185610,0.1041970,  0.8443940E-02, -0.3576110E-01, -0.3181020E-01, -0.2439550E-01, -0.1080620E-01,0.3305830E-03,0.9759580E-03,0.2986620E-03,  0.8470510E-04,0.3791012E-04},{ -14.21580, 4.725200, 3.030610, 1.210880,  0.7095950,0.3995110,0.1059870,0.4277020E-01,  0.1648830E-01, -0.5195920E-02, -0.7289900E-02, -0.7316350E-02, -0.5283660E-02, -0.1704310E-02, -0.2138630E-03, -0.4820360E-04, -0.1967520E-04,0.6236906E-06},{ -14.21580, 4.725200, 3.030610, 1.210880,  0.7095950,0.3995110,0.1059870,0.4277020E-01,  0.1648830E-01, -0.5195920E-02, -0.7289900E-02, -0.7316350E-02, -0.5283660E-02, -0.1704310E-02, -0.2138630E-03, -0.4820360E-04, -0.1967520E-04,0.6236906E-06},{ -1.978190,-13.39480,-5.951260,-2.063850,  -1.153630, -0.6274770, -0.1543950, -0.6423500E-01, -0.2485220E-01,0.5017810E-02,0.7866950E-02,0.8054450E-02,  0.5745160E-02,0.1709900E-02,0.1751950E-03,0.4683070E-04,  0.7705210E-05,0.1172250E-05},{ -1.978190,-13.39480,-5.951260,-2.063850,  -1.153630, -0.6274770, -0.1543950, -0.6423500E-01, -0.2485220E-01,0.5017810E-02,0.7866950E-02,0.8054450E-02,  0.5745160E-02,0.1709900E-02,0.1751950E-03,0.4683070E-04,  0.7705210E-05,0.1172250E-05},{98.37540, 53.98840, 17.98990, 5.075110, 2.534970, 1.193660,0.1717590,0.1902250E-01, -0.3815920E-01, -0.5771710E-01, -0.5109180E-01, -0.4268930E-01, -0.2755110E-01, -0.1100570E-01, -0.2633680E-02, -0.9336650E-03, -0.3016100E-03, -0.8113200E-04},{98.37540, 53.98840, 17.98990, 5.075110, 2.534970, 1.193660,0.1717590,0.1902250E-01, -0.3815920E-01, -0.5771710E-01, -0.5109180E-01, -0.4268930E-01, -0.2755110E-01, -0.1100570E-01, -0.2633680E-02, -0.9336650E-03, -0.3016100E-03, -0.8113200E-04},{ -3.133810, -0.1173160,0.1475160,0.8581860E-01,  0.5956800E-01,0.3303760E-01,0.1493700E-01,0.5619830E-02,  0.4140040E-02,0.1007130E-02,0.7782330E-04, -0.4896230E-03, -0.8994750E-03, -0.5543120E-03, -0.5019110E-04,0.2947220E-05, -0.4297450E-05, -0.2029972E-05},{5.065200,0.3046350, -0.1335860, -0.9064220E-01, -0.5901680E-01, -0.3526970E-01, -0.1693800E-01, -0.5837100E-02, -0.4587830E-02, -0.1183920E-02, -0.1795010E-03,0.4217120E-03,  0.8743230E-03,0.5251070E-03,0.3147610E-04, -0.1391420E-04,  0.1276110E-04,0.6027917E-05},{ -5.725710,0.3444550,0.3920550,0.1827380,  0.1186330,0.7578740E-01,0.2794620E-01,0.1254540E-01,  0.9424620E-02,0.3174360E-02,0.1465920E-02,0.4075920E-03, -0.5539500E-03, -0.4943700E-03, -0.5896150E-04,0.1330370E-04,  0.3323780E-04,0.1570043E-04},{8.369820,-2.214290,-1.219270, -0.4946200, -0.3052670, -0.1881560, -0.7314850E-01, -0.3960540E-01, -0.2758410E-01, -0.1101030E-01, -0.6750550E-02, -0.3963920E-02, -0.1107000E-02,0.5490610E-04, -0.1848920E-04, -0.6460390E-05,  0.9815410E-06,0.4636471E-06},{79.52290, 37.98070, 13.17280, 4.536230, 2.692770, 1.622410,0.6126180,0.3791400,  0.2466690,0.1074180,0.7188030E-01,0.4866270E-01,  0.2307400E-01,0.6314340E-02,0.9786610E-03,0.2586260E-03,  0.6786710E-04,0.2135395E-04},{ -8.025430, 2.314730,0.6371770, -0.1747440E-01, -0.9859480E-01, -0.9947720E-01, -0.8082740E-01, -0.5703880E-01, -0.4475930E-01, -0.2108350E-01, -0.1408560E-01, -0.9445170E-02, -0.3916020E-02, -0.6286740E-03, -0.7214680E-04,0.4746600E-04,  0.8744770E-04,0.4130737E-04},{ -8.025430, 2.314730,0.6371770, -0.1747440E-01, -0.9859480E-01, -0.9947720E-01, -0.8082740E-01, -0.5703880E-01, -0.4475930E-01, -0.2108350E-01, -0.1408560E-01, -0.9445170E-02, -0.3916020E-02, -0.6286740E-03, -0.7214680E-04,0.4746600E-04,  0.8744770E-04,0.4130737E-04},{ -5.781750, -0.1026200,0.1725670,0.7010510E-01,  0.4081560E-01,0.1791850E-01,0.4382160E-02, -0.4452280E-03, -0.2624970E-02, -0.2265630E-02, -0.2058040E-02, -0.1847930E-02, -0.1328240E-02, -0.4801200E-03, -0.9169020E-04, -0.2215610E-04, -0.1088670E-04, -0.5142513E-05},{ -5.781750, -0.1026200,0.1725670,0.7010510E-01,  0.4081560E-01,0.1791850E-01,0.4382160E-02, -0.4452280E-03, -0.2624970E-02, -0.2265630E-02, -0.2058040E-02, -0.1847930E-02, -0.1328240E-02, -0.4801200E-03, -0.9169020E-04, -0.2215610E-04, -0.1088670E-04, -0.5142513E-05},{7.027790, -0.9038670, -0.4559790, -0.1225410, -0.5405760E-01, -0.1266550E-01,0.3685590E-02,0.7052920E-02,  0.7744590E-02,0.4937820E-02,0.3918150E-02,0.3098250E-02,  0.1889060E-02,0.5313300E-03,0.5885940E-04,0.4710510E-05, -0.3205140E-05, -0.1514001E-05},{7.027790, -0.9038670, -0.4559790, -0.1225410, -0.5405760E-01, -0.1266550E-01,0.3685590E-02,0.7052920E-02,  0.7744590E-02,0.4937820E-02,0.3918150E-02,0.3098250E-02,  0.1889060E-02,0.5313300E-03,0.5885940E-04,0.4710510E-05, -0.3205140E-05, -0.1514001E-05},{ -13.97550, 2.701500,0.5991040, -0.6206430E-01, -0.1227540, -0.1237230, -0.8077350E-01, -0.5834340E-01, -0.4372330E-01, -0.2014270E-01, -0.1407160E-01, -0.9988140E-02, -0.5341590E-02, -0.1636260E-02, -0.2331850E-03, -0.5621390E-04, -0.3443870E-04, -0.2037703E-05},{ -13.97550, 2.701500,0.5991040, -0.6206430E-01, -0.1227540, -0.1237230, -0.8077350E-01, -0.5834340E-01, -0.4372330E-01, -0.2014270E-01, -0.1407160E-01, -0.9988140E-02, -0.5341590E-02, -0.1636260E-02, -0.2331850E-03, -0.5621390E-04, -0.3443870E-04, -0.2037703E-05},{ -1.130700,0.3078620E-01,0.3096270E-01,0.1053540E-01,  0.5832960E-02,0.7466110E-02,0.1972420E-02,0.1863620E-03,  0.8696030E-04,0.2858860E-03,0.6588970E-04, -0.8460240E-04, -0.2705890E-03, -0.2084680E-03, -0.4148260E-04, -0.1331120E-04, -0.2126560E-04, -0.1004516E-04},{ -1.130700,0.3078620E-01,0.3096270E-01,0.1053540E-01,  0.5832960E-02,0.7466110E-02,0.1972420E-02,0.1863620E-03,  0.8696030E-04,0.2858860E-03,0.6588970E-04, -0.8460240E-04, -0.2705890E-03, -0.2084680E-03, -0.4148260E-04, -0.1331120E-04, -0.2126560E-04, -0.1004516E-04},{3.309300, -0.4607880, -0.1640150, -0.5876710E-01, -0.3759070E-01, -0.1509200E-01, -0.1046820E-01, -0.5485500E-02, -0.4298030E-02, -0.2135220E-02, -0.1326420E-02, -0.7447730E-03, -0.4646640E-04,0.1859330E-03,0.2285290E-04,0.1575560E-05, -0.7206680E-05, -0.3404195E-05},{3.309300, -0.4607880, -0.1640150, -0.5876710E-01, -0.3759070E-01, -0.1509200E-01, -0.1046820E-01, -0.5485500E-02, -0.4298030E-02, -0.2135220E-02, -0.1326420E-02, -0.7447730E-03, -0.4646640E-04,0.1859330E-03,0.2285290E-04,0.1575560E-05, -0.7206680E-05, -0.3404195E-05},{30.41320, 12.98730, 3.857270, 1.226340,  0.7112110,0.4112710,0.1523770,0.9307260E-01,  0.5781650E-01,0.2448810E-01,0.1579950E-01,0.1021710E-01,  0.4078160E-02,0.5167940E-03,0.2874490E-04, -0.9593670E-05,  0.9750780E-05,0.6969493E-06},{30.41320, 12.98730, 3.857270, 1.226340,  0.7112110,0.4112710,0.1523770,0.9307260E-01,  0.5781650E-01,0.2448810E-01,0.1579950E-01,0.1021710E-01,  0.4078160E-02,0.5167940E-03,0.2874490E-04, -0.9593670E-05,  0.9750780E-05,0.6969493E-06},{30.58330, 8.796930, 2.084730,0.5773330,  0.3183440,0.1878300,0.5734750E-01,0.3777780E-01,  0.1959070E-01,0.7825210E-02,0.4878920E-02,0.3105060E-02,  0.1141250E-02,0.4006180E-04,0.2272980E-04,0.1976060E-04,  0.1432040E-04,0.3368699E-07},{ -3.411950,0.5133980E-01,0.6896370E-02, -0.2381660E-01, -0.2403300E-01, -0.2531990E-01, -0.1046580E-01, -0.3027280E-02, -0.4854140E-02, -0.2181940E-02, -0.1470680E-02, -0.1165040E-02, -0.5515570E-03, -0.1375360E-03, -0.4448200E-04,0.5667410E-04,  0.4272730E-04,0.2018295E-04},{ -3.411950,0.5133980E-01,0.6896370E-02, -0.2381660E-01, -0.2403300E-01, -0.2531990E-01, -0.1046580E-01, -0.3027280E-02, -0.4854140E-02, -0.2181940E-02, -0.1470680E-02, -0.1165040E-02, -0.5515570E-03, -0.1375360E-03, -0.4448200E-04,0.5667410E-04,  0.4272730E-04,0.2018295E-04},{1.482870, -0.6521980E-01, -0.4731020E-01, -0.1210990E-01, -0.3964550E-02,0.2788330E-02,0.2255380E-02, -0.5733710E-03,  0.1126390E-02,0.6336810E-03,0.5368230E-03,0.4815470E-03,  0.3270260E-03,0.1187940E-03,0.1297860E-04,0.6598920E-05,  0.4367020E-05,0.2062834E-05},{1.482870, -0.6521980E-01, -0.4731020E-01, -0.1210990E-01, -0.3964550E-02,0.2788330E-02,0.2255380E-02, -0.5733710E-03,  0.1126390E-02,0.6336810E-03,0.5368230E-03,0.4815470E-03,  0.3270260E-03,0.1187940E-03,0.1297860E-04,0.6598920E-05,  0.4367020E-05,0.2062834E-05},{ -7.534820,0.3036720,0.4269740E-02, -0.4016560E-01, -0.3515300E-01, -0.3365760E-01, -0.1513630E-01, -0.6999740E-02, -0.6327010E-02, -0.2367320E-02, -0.1642340E-02, -0.1168870E-02, -0.6966220E-03, -0.2893030E-03, -0.5540730E-04,0.6854970E-05,  0.1174530E-04, -0.1990403E-07},{ -7.534820,0.3036720,0.4269740E-02, -0.4016560E-01, -0.3515300E-01, -0.3365760E-01, -0.1513630E-01, -0.6999740E-02, -0.6327010E-02, -0.2367320E-02, -0.1642340E-02, -0.1168870E-02, -0.6966220E-03, -0.2893030E-03, -0.5540730E-04,0.6854970E-05,  0.1174530E-04, -0.1990403E-07},{ 0.4616120, -0.5577950, -0.8010760E-01, -0.1636970E-01, -0.1011520E-01, -0.6428660E-02, -0.4585400E-03,0.1450310E-02, -0.3449210E-03, -0.2263340E-03, -0.1837840E-03, -0.1676940E-03, -0.1197950E-03, -0.3402550E-04,0.3496600E-05,0.5246950E-05, -0.1491170E-04, -0.7043788E-05},{ 0.4616120, -0.5577950, -0.8010760E-01, -0.1636970E-01, -0.1011520E-01, -0.6428660E-02, -0.4585400E-03,0.1450310E-02, -0.3449210E-03, -0.2263340E-03, -0.1837840E-03, -0.1676940E-03, -0.1197950E-03, -0.3402550E-04,0.3496600E-05,0.5246950E-05, -0.1491170E-04, -0.7043788E-05},{6.068830, 3.183890,0.7085180,0.1887580,  0.1007020,0.6392240E-01,0.1774010E-01,0.9494250E-02,  0.5805550E-02,0.2503410E-02,0.1544940E-02,0.1006920E-02,  0.3196870E-03, -0.4694050E-04, -0.1299720E-04, -0.2524900E-04, -0.1838630E-04,0.1008184E-07},{6.068830, 3.183890,0.7085180,0.1887580,  0.1007020,0.6392240E-01,0.1774010E-01,0.9494250E-02,  0.5805550E-02,0.2503410E-02,0.1544940E-02,0.1006920E-02,  0.3196870E-03, -0.4694050E-04, -0.1299720E-04, -0.2524900E-04, -0.1838630E-04,0.1008184E-07},{12.10810, 3.162600,0.5461680,0.1244390,  0.6466940E-01,0.2747590E-01,0.1066450E-01,0.7900690E-02,  0.2488580E-02,0.9476730E-03,0.6022920E-03,0.3997570E-03,  0.1367010E-03, -0.1143250E-04, -0.1043230E-04,0.7812270E-06,  0.4875910E-05,0.6764374E-09},{12.10810, 3.162600,0.5461680,0.1244390,  0.6466940E-01,0.2747590E-01,0.1066450E-01,0.7900690E-02,  0.2488580E-02,0.9476730E-03,0.6022920E-03,0.3997570E-03,  0.1367010E-03, -0.1143250E-04, -0.1043230E-04,0.7812270E-06,  0.4875910E-05,0.6764374E-09},{8.325730, 1.764260,0.2077320,0.3723380E-01,  0.1458540E-01,0.1297070E-01,0.2426950E-02,0.3508510E-02,  0.4410090E-03,0.6846750E-04,0.1329320E-03,0.9575560E-04,  0.4401280E-04,0.1609500E-04,0.3858850E-04,0.3421280E-04,  0.2285660E-04,0.1800077E-10}};
    protected static final double [] qajp1 = {-2566.052,-1410.014,-1410.014,-48.88740, 144.1400,-852.0460,-122.0552,-122.0552, 37.88200, 37.88200,-22.83322,-22.83322,  -88.77400,-88.77400, 6.032988,-9.521130, 12.14033,-21.16822,-83.08440, 20.68032, 20.68032, 11.35826, 11.35826,-15.86331,  -15.86331, 33.35400, 33.35400, 2.322972, 2.322972,-7.540176,-7.540176,-34.85180,  -34.85180,-43.57274, 6.926580, 6.926580,  -3.096180,-3.096180, 15.67698, 15.67698,  -2.038814,-2.038814,-5.769880,-5.769880,  -17.89100,-17.89100,-13.12294};
    protected static final double [] qajpn = {0.1263397E-01,0.1163656E-02,0.1163656E-02,0.3654207E-04,  0.2368282E-04,0.9351529E-04, -0.1596215E-04, -0.1596215E-04, -0.2626066E-06, -0.2626066E-06, -0.4935790E-06, -0.4935790E-06,  0.2879949E-04,0.2879949E-04,0.5074929E-06, -0.1506979E-05, -0.3925106E-05, -0.1159118E-06, -0.1011503E-04, -0.1032684E-04, -0.1032684E-04,0.1285628E-05,0.1285628E-05,0.3785002E-06,  0.3785002E-06,0.9652276E-06,0.9652276E-06,0.2511290E-05,  0.2511290E-05,0.8510486E-06,0.8510486E-06, -0.4034970E-06, -0.4034970E-06, -0.2304899E-07, -0.5045737E-05, -0.5045737E-05, -0.5157085E-06, -0.5157085E-06,0.1152339E-07,0.1152339E-07,  0.1760947E-05,0.1760947E-05, -0.6898098E-08, -0.6898098E-08, -0.5340296E-09, -0.5340296E-09, -0.1610595E-10};
    protected static final double [] qaa = {0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, -0.4297450E-05,0.1276110E-04,  0.3323780E-04,0.9815410E-06, 0.00,0.8744770E-04,  0.8744770E-04, -0.1088670E-04, -0.1088670E-04, -0.3205140E-05, -0.3205140E-05, 0.00, 0.00, -0.2126560E-04, -0.2126560E-04, -0.7206680E-05, -0.7206680E-05, 0.00, 0.00, 0.00,0.4272730E-04,0.4272730E-04,  0.4367020E-05,0.4367020E-05, 0.00, 0.00, -0.1491170E-04, -0.1491170E-04, 0.00, 0.00, 0.00, 0.00, 0.00};
    protected static final double [] qbet = {0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,0.250,0.250,  0.250,0.250, 0.00,0.250,  0.250,0.250,0.250,0.250,  0.250, 0.00, 0.00,0.250,  0.250,0.250,0.250, 0.00, 0.00, 0.00,0.250,0.250,  0.250,0.250, 0.00, 0.00,  0.250,0.250, 0.00, 0.00, 0.00, 0.00, 0.00};


    public P2O2Bartolomei(ISpace space) {
        this.space = space;
    }

    public double getRange() {        
        return Double.POSITIVE_INFINITY;
    }

    public void setBox(IBox box) {
        boundary = box.getBoundary();
    }

    public int nBody() {     
        return 2;
    }

    public double energy(IAtomList atoms) {        
        return 0;
    }

//------------------> cortar aqui para su uso en otros programas
//cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
//c                                                                      c
//c                    A T E N C I O N:  CC-MRCI                         c
//c         superficies de energia potencial del dimero O2-O2            c
//c                          mrci                                        c
//c                      version v1  mayo 10                             c
//c         rev.2 octubre 10 [ errors in mxter][npun]                     c
//c         rev.3 nov. 10    ( se include extrapolacion                  c
//c                            corto alcance, con y_1, yp_1              c
//c         rev.4 nov. 10    [ pp][errors in short rang extrapl ]         c
//c         rev.5 ene. 11    [ se incluye el espin como argumento ]      c
//c                                                                      c
//c     superficies basadas en calculo quintuplete                       c
//c     con ccsd[t], y computo de diferencias para singlete,triplete     c
//c     con          MRCI                                                c 
//c     segun J. Chem. Phys., 133, 124311 [2010], doi: 10.1063/1.3479395 c
//c           Phys. Chem. Chem. Phys., 10 , 5374-5380 [2008]             c
//c                                                                      c 
//c     desarrollo en armonicos esfericos como en el JCP'08              c 
//c           J. Chem. Phys., 128, 214304-1:214304-10 [2008].            c
//c     - tal como se usa en ultracold                                   c 
//c     - para el molscat/bound, los terminos radiales han de            c
//c       multiplicarse por 1./dsqrt[dble[2*l+1]]                      c 
//c                                                                      c
//cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


public static double abicipeso4 (int s, double rSim, double thearad, double thebrad, double phirad) {

    //----------------- s multiplicity
    //                  rr distance bohrs
    //                  thearad    angle theta a radians
    //                  thebrad    angule tehta b radians
    //                  phirad     angule phi     radians
    //                  vpot       potential meV
    //-----------------------------------------------------

    double [] x3lnew = new double [mxter];
    double [] aa = new double [mxter];
    double [] bet = new double [mxter];
    double [] yread = new double [npun];
    double [] y2read = new double [npun];
    double rBohr = BohrRadius.UNIT.fromSim(rSim);
    
    for (int i=0; i<mxter; i++) {
        x3lnew[i] = 0;
        aa[i] = 0;
        bet[i] = 0;
    }

    //c-------------------------------------------------------

    //      *********************
    //      s es la multiplicidad        s=0,1,2  [sing,trip,quint]
    //      *********************

    //c------------ conversiones y constantes
 
    double cvaumev = 27.2113957e3;      //  a.u. ->   mev
    pascal();

    //c---- evaluacion de los terminos radiales a un valor dado de 
    //c----             rr [bohr],thearad,thebrad,phirad [radians]

    double cthea = Math.cos(thearad);
    double ctheb = Math.cos(thebrad);

    x3lnew = stx3leval(cthea,ctheb,phirad);

    double sum=0.0;
    double yp1,ypn;

    //----------------- eligiendo multiplicidad

    for (int ite=0; ite<mxter; ite++) {
        if (s==0) {
            aa[ite]= saa[ite];            // singlete
            bet[ite]=sbet[ite];
        }
        else if (s==1) {
            aa[ite]=taa[ite];             // triplete
            bet[ite]=tbet[ite];
        }
        else if (s==2) {                    
            aa[ite]=qaa[ite];             // quintuplete
            bet[ite]=qbet[ite];
        }
        else {
            throw new RuntimeException("Multiplicity is wrong!");
        }
    }

    //-------------------- do loop in number of terms, mxter 
    for (int iter=0; iter<mxter; iter++) {

        for (int ir=0; ir<npun; ir++) {
            if (s==0) {
                yread[ir]= sajmols[iter][ir];           // singlete
            }
            else if (s==1) {
                yread[ir]= tajmols[iter][ir];           // triplete
            }
            else if (s==2) {                    
                yread[ir]= qajmols[iter][ir];           // quintuplete
            }
            else {
                throw new RuntimeException("Multiplicity is wrong!");
            }
            y2read[ir]= 0;
        }
        //         write[6,*] 'iter,pot,x3lnew[iter]'

        if (s==0) {
            yp1= sajp1[iter];
            ypn= sajpn[iter];                          // singlete
        }
        else if (s==1) {
            yp1= tajp1[iter];
            ypn= tajpn[iter];                          // triplete
        }
        else if (s==2) {
            yp1= qajp1[iter];
            ypn= qajpn[iter];                          // quintuplete
        }
        else {
            throw new RuntimeException("Multiplicity is wrong!");
        }

        y2read = spline(yread,yp1,ypn);
        double pot = 0;

        if (rBohr<=rfit[npun-1] && rBohr>=rfit[0]){ // in range
            pot = splint(yread,y2read,rBohr);
        }
        else if (rBohr>rfit[npun-1]) {   // out long range
            if (aa[iter]==0){
                double vlong6= -cvaumev*c6[iter]/Math.pow(rBohr,6);
                double vlong8= -cvaumev*c8[iter]/Math.pow(rBohr,8);
                double vlelec= cvaumev*cclec[iter]/Math.pow(rBohr,lla[iter]+llb[iter]+1);
                pot= vlong6+vlong8+vlelec;
            }
            else {
                pot= aa[iter]*Math.exp(-bet[iter]*(rBohr-rfit0));
            }
        }
        else if (rBohr<rfit[0]) {  // out short range
            //-------------- extrapolation based on first point and derivative
            //--------------     y_1 = a * exp [ b * x_1]
            //--------------     yp_1 = a * b * exp[ b * x_1]

            //--------------    experimental, handle with care
            System.out.println("yes");

            double bbb=yp1/yread[0];
            double aab=yread[0]/Math.exp(bbb*rfit[0]);
            

            if (yread[0]*yread[1]>0.0 ) {
                pot=aab*Math.exp(bbb*rBohr);
            
            }
            else {
                double brecta=yread[0]-yp1*rfit[0];
                pot=yp1*rBohr+brecta;            
            }
            
        }


        sum += pot*x3lnew[iter];
        //         write[6,1002] iter,lla[iter],llb[iter],llcen[iter],
        //     &                 sum,x3lnew[iter],pot,
        //     &                 aa[iter],bet[iter]
    }
    //---------------------------- end do loop, mxter

    //----------------- vpot will be meV

    double vpot= Math.pow(4.0*Math.PI,1.5)* sum;

    // 1002  format[1x,i2,3[1x,i3),2[1x,g15.7],/,3x,5(1x,g15.8]];
    //       write[6,*] rr,thea,theb,vpot

    return vpot*1E-3*ElectronVolt.UNIT.toSim(1);
}

//cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
//c                                                                      c
//c                    subroutine stx3leval                              c
//c                                                                      c
//cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
protected static double [] stx3leval(double costha, double costhb, double phi) {
    double [] x3l = new double [mxter];    
    for (int icf=1; icf<=mxter; icf++) {
        int la=lla[icf-1];
        int lb=llb[icf-1];
        int l =ll[icf-1];
        double facplm = Math.sqrt((2*l+1)*4.0/Math.pow(4*Math.PI,3));
        double sum = 0.0;        
        for (int ma=0; ma <= Math.min(la,lb); ma++) {         //loop over m
            //c---   aqui viene como antiguamente pues se suman separadamente 
            //c---   los casos la,lb y lb,la            
            double thrab = threej(la,lb,l,ma,-ma,0);           
            double term = Math.cos(ma*phi)* thrab*plm(la,ma,costha)*plm(lb,ma,costhb);
//            if (icf == 9 && ma == 2) {
//                System.out.println(costha+" "+costhb+" "+plm(la,ma,costha)+" "+plm(lb,ma,costhb));
//                System.exit(1);
//            }
            if (ma != 0) term = term + term;
            if (ma % 2 != 0) term = -term;
            sum += term;
//            if (icf == 9) {
//                System.out.println(ma+" thrab = "+thrab);
//                System.out.println(ma+" term = "+term);
//                System.out.println(ma+" sum = "+sum);                
//            }
        }
//        if (icf == 9) System.exit(1);
        x3l[icf-1]=sum*facplm;
//        System.out.println(icf+" "+String.format("%e", x3l[icf-1]));
    }
//    System.exit(1);
    return x3l;
}

//cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
//c                                                                      c
//c                    subroutine splint                                 c
//c                                                                      c
//c---- cubic spline interpolation by num. recipes                       c
//c     (por ahora, lo mas sencillo para poder elegir                    c
//c      las condiciones de contorno tal que las primeras                c
//c      derivadas en las fronteras sean definidas a priori)             c
//c                                                                      c
//cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
protected static double splint(double [] ya, double [] y2a,double x) {
    int kLow=1; // ***check
    int kHigh=npun; // ***check
    do {
        int k=(kHigh+kLow)/2;
        if (rfit[k-1]>x){
            kHigh=k;
        }
        else {
            kLow=k;
        }
    } while (kHigh-kLow>1); 
    double h=rfit[kHigh-1]-rfit[kLow-1];
    if (h==0.0) System.exit(1);    // originally --> pause 'bad xa input in splint'
    double a=(rfit[kHigh-1]-x)/h;
    double b=(x-rfit[kLow-1])/h;
    double y=a*ya[kLow-1] + b*ya[kHigh-1] + ((Math.pow(a,3)-a)*y2a[kLow-1] + (Math.pow(b,3)-b)*y2a[kHigh-1])*Math.pow(h,2)/6.0;
    return y;
}
//C  [C] Copr. 1986-92 Numerical Recipes Software 'k'1k30m,t+W.
//cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
//c                                                                      c
//c                    subroutine spline                                 c
//c                                                                      c
//c                                                                      c
//cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
protected static double [] spline(double [] y, double yp1, double ypn) {
    int nmax = 500;
    double [] u = new double [nmax];
    double [] y2 = new double [npun];
    double p,qn,sig,un;
    if (yp1 > 0.99e30) {
        y2[0]=0.0;
        u[0]=0.0;
    }
    else {
        y2[0]=-0.5;
        u[0]=(3.0/(rfit[1]-rfit[0]))*((y[1]-y[0])/(rfit[1]-rfit[0])-yp1);
    }
    for (int i=2; i<=npun-1; i++) {
        sig=(rfit[i-1]-rfit[i-2])/(rfit[i]-rfit[i-2]);
        p=sig*y2[i-2]+2.0;
        y2[i-1]=(sig-1.0)/p;
        u[i-1]=(6.0*((y[i]-y[i-1])/(rfit[i]-rfit[i-1])- (y[i-1]-y[i-2])/(rfit[i-1]-rfit[i-2]))/(rfit[i]-rfit[i-2])-sig*u[i-2])/p;
    }
    if (ypn>0.99e30) {
        qn=0.0;
        un=0.0;
    }
    else {
        qn=0.5;
        un=(3.0/(rfit[npun-1]-rfit[npun-2]))*(ypn-(y[npun-1]-y[npun-2])/(rfit[npun-1]-rfit[npun-2]));
    }
    y2[npun-1]=(un-qn*u[npun-2])/(qn*y2[npun-2]+1.0);
    for (int k=npun-1; k >= 1; k--) {
        y2[k-1]=y2[k-1]*y2[k]+u[k-1];
    }
//    System.out.println(yp1+" "+ypn);
//    for (int lm=1; lm<=npun; lm++) {
//        System.out.println(lm+" "+y[lm-1]+" "+y2[lm-1]);
//    }
//    System.exit(1);
    return y2;
}
//C  [C] Copr. 1986-92 Numerical Recipes Software 'k'1k30m,t+W.
//cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
//c                                                                      c
//c                    subroutine pascal                                 c
//c                                                                      c
//cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
//c
//c  uses pascal's triangle to initialize an array of binomal coefficients
//c
protected static void pascal() {
    binom[0][0] = 1.0;
    for (int i=2; i<=nbin; i++) {
        binom[i-1][0] = 1.0;
        binom[i-1][i-1] = 1.0;
        if (i <= 2) continue;
        int i1 = i - 1;
        for (int j=2; j<=i1; j++) {
            binom[i-1][j-1] = binom[i1-1][j-2] + binom[i1-1][j-1];
        }
    }
}
//c--------------------------------------------------------------------
protected static double threej (int j1, int j2, int j3, int m1, int m2, int m3) {
    double threej = 0.0;
    if (m1+m2+m3 != 0.0) return threej;
    int i1 = -j1 + j2 + j3 + 1;
    if (i1 <= 0.0) return threej;
    int i2 =  j1 - j2 + j3 + 1;
    if (i2 <= 0.0) return threej;
    int i3 =  j1 + j2 - j3 + 1;
    if (i3 <= 0.0) return threej;
    int k1 =  j1 + m1 + 1;
    if (k1 <= 0.0) return threej;
    int k2 =  j2 + m2 + 1;
    if (k2 <= 0.0) return threej;
    int k3 =  j3 + m3 + 1;
    if (k3 <= 0.0) return threej;
    int l1 =  j1 - m1 + 1;
    if (l1 <= 0.0) return threej;
    int l2 =  j2 - m2 + 1;
    if (l2 <= 0.0) return threej;
    int l3 =  j3 - m3 + 1;
    if (l3 <= 0.0) return threej;
    int n1 = -j1 - m2 + j3;
    int n2 =  m1 - j2 + j3;
    int n3 =  j1 - j2 + m3;
//    System.out.println("i1 ="+i1+" i2 ="+i2+" i3 ="+i3+" k1 ="+k1+" k2 ="+k2+" k3 ="+k3+" l1 ="+l1+" l2 ="+l2+" l3 ="+l3+" n1 ="+n1+" n2 ="+n2+" n3 ="+n3);
    int imin = Math.max(-n1,-n2);
    imin = Math.max(imin, 0) + 1;
    int imax = Math.min(l1,k2);
    imax = Math.min(imax, i3);
    if (imin > imax) return threej;
//    System.out.println("imin = "+imin+" imax = "+imax);
    double sign = 1.0;
    for (int i=imin; i<=imax; i++) {
        sign = -sign;
        threej += sign*binom[i1-1][n1+i-1]*binom[i2-1][n2+i-1]*binom[i3-1][i-1];
    }    
    threej *= Math.sqrt(binom[j2+j2][i3-1]*binom[j1+j1][i2-1]/(binom[j1+j2+j3+1][i3-1]*(j3+j3+1.0)* binom[j1+j1][l1-1]*binom[j2+j2][l2-1]*binom[j3+j3][l3-1]));    
    if ((n3+imin) % 2 != 0) threej = - threej;    
    return threej;
}
//c*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
//c
//c     computes normalized assoc. legendre polynomials by recursion.
//c     the values returned are normalized for integration over x
//c     [i.e. integration over cos theta but not phi].
//c     note that the normalization gives
//c           plm[l,0,1)=sqrt(l+0.5]
//c           plm[l,0,x)=sqrt[l+0.5] p(l,x]
//c     for m!=0, the value returned differs from the usual
//c           definition of the associated legendre polynomial
//c           [e.g. edmonds pages 23-24]
//c           by a factor of [-1)**m*sqrt[l+0.5)*sqrt[(l-m]///(l+m]//]
//c     thus the spherical harmonics are
//c          clm = plm * exp[i*m*phi) / sqrt(l+0.5]
//c          ylm = plm * exp[i*m*phi) / sqrt(2*pi]
//c
//c     program of r. nerf modifed by s. green.
//c       mod feb. 82 by s.g. according to r.t pack's suggestion
//c       for improved accuracy large abs[x]
//c     modified aug 88 by s.g. to keep rat from blowing up at large l
//c       by including factor [-z]**l in preceding loop
//c     error in stmt. no. 211 corrected may 93 by sg
//
protected static double plm(int l, int mm, double x) {
    double plm = 0.0;
    int m = Math.abs(mm);
    if ( m>l || l<0) throw new RuntimeException("Argument(s) out of range!");
    double p1=1.0;
    double p2=x;
    double p3 = 0.0;
    boolean goto20 = false;
    boolean goto10 = false;
    boolean goto210 = false;
    if (l==0) {
        goto20 = true;
    }
    //c *** use alternate recursion for large m or large abs[x]
    else {
        if (m==0) {
            goto10 = true;
        }
        else {
            double xtest=0.49999*(1.0+1.0/m);
            int mtest=l/3;
            if (m>mtest || Math.abs(x)>xtest) {            
                goto210 = true;
            }
            else {
                goto10 = true;
            }
        }

        //c ***
        if (goto10) {
            for (int i=1; i<=l; i++) {
                p3=((2.0*i+1.0)*x*p2-i*p1)/(i+1.0);
                p1=p2;
                p2=p3;
            }

            if (m==0) {
                goto20 = true;
            }
            else {
                //c at end of loop p1=p[l,0,x]
                if (Math.abs(x)>1.0) throw new RuntimeException("Argument(s) out of range!");
                double z= Math.sqrt(1.0-x*x);
                if (z<=1e-10) return 0;
                p2=(l+1.0)*(p2-x*p1)/z;
                for(int i=1; i<=m; i++) {
                    p3=-2.0*x/z*p2*i-(l+i)*(l-i+1.0)*p1;
                    p1=p2;
                    p2=p3;
                }
                goto20 = true;
            }
        }
        //c ***
        //c     below recurs down in m, as suggested by r. t pack
        if (goto210) {
            
            if (Math.abs(x)>1.0) throw new RuntimeException("Argument(s) out of range!");
        }
        if (!goto20) {
            
            double z= Math.sqrt(1.0-x*x);
            if (z<=1e-10) return 0;
            //c     calculate ratio of factorials for pll
            double rat=1.0;
            double xi=0.0;
            for (int i=1; i<=l; i++) {
                xi=xi+1.0;
                rat *= -0.5*z*(l+xi);
            }            
            //c     calculate pll   ----  n.b. above incl [-z]**l computation
            //c     p1=rat*[-z]**l
            p1=rat;
            if (m==l) goto20 = true;
            if (!goto20) {
                p2=p1;
                p1=-x*p2/z;                
                if (m==l-1) goto20 = true;
                if (!goto20) {
                    int lm1 = l-m-1;
                    //c     recur downward in m
                    for (int i=1; i<=lm1; i++) {
                        int mu=l-i-1;
                        p3=p2;
                        p2=p1;                        
                        p1=2.0*(mu+1.0)*x*p2/z+p3;                        
                        p1/= -(l-mu)*(l+mu+1.0);                        
                    }
                    
                    goto20 = true;
                }
            }
        }
    }
    //c ***
    //c     normalization . . .
    if (goto20) {
        double xnorm = (2.0*l+1.0)/2.0;
        if (m<=0) {
            plm=p1*Math.sqrt(xnorm);
            return plm;
        }
        double xlm=l+1.0;
        double xlp=l;
        for (int i=1; i<=m; i++) {
            xlm--;
            xlp++;
            xnorm/= (xlm*xlp);
        }
        plm=p1*Math.sqrt(xnorm);        
    }
    return plm;
}

}
//cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
//c                                                                      c
//c                    subroutine factlog                                c
//c                                                                      c
//cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
//c#######################################################################
//c#    initialisation of logarithms of factorials array [from molcol.f] #
//c#######################################################################

//ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
//c                                                                   c
//c                        block data  comun                          c
//c                          cc-mrci-o2o2.f                           c
//c              [potential parameter's for o_2 + o_2]                c
//c                       oxigenada corporacion [c] 2010              c
//c                                                                   c
//ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc




//          npun --> numero de puntos ab intio
//          mxter -> numero de terminos desarrollo


//c--------------------------------------------------------------------
//c--------------------------------------------------------------------
//c       potenciales o2-o2
//c
//c       J. Chem. Phys., 133, 124311 [2010], doi: 10.1063/1.3479395
//c
//c        terminos comunes [la,lb,lc] de desarrollo, r puntos
//c        ab initio y terminos comunes de largo alcance
//c        VALIDO para:
//c        Singlete, triplete, quintuplete       cc-mrci 
//c
//c        atencion: 4.75 --- 5.25; puntos presentes en pt2, y no en MRCI
//c--------------------------------------------------------------------


//c--------------------------------------------------------------------

//c------------- terminos del desarollo la, lb, lcen



//c------------- r ab initio



//c---------------- para el largo alcance, rfit0 r inicial de ajuste

/*data[rfit0[i], i=1,mxter] /                                         &;
&  19.00000    ,   19.00000    ,   19.00000    ,   19.00000    ,     &;
&  19.00000    ,   19.00000    ,   19.00000    ,   19.00000    ,     &;
&  19.00000    ,   19.00000    ,   19.00000    ,   19.00000    ,     &;
&  19.00000    ,   19.00000    ,   19.00000    ,   19.00000    ,     &;
&  19.00000    ,   19.00000    ,   19.00000    ,   19.00000    ,     &;
&  19.00000    ,   19.00000    ,   19.00000    ,   19.00000    ,     &;
&  19.00000    ,   19.00000    ,   19.00000    ,   19.00000    ,     &;
&  19.00000    ,   19.00000    ,   19.00000    ,   19.00000    ,     &;
&  19.00000    ,   19.00000    ,   19.00000    ,   19.00000    ,     &;
&  19.00000    ,   19.00000    ,   19.00000    ,   19.00000    ,     &;
&  19.00000    ,   19.00000    ,   19.00000    ,   19.00000    ,     &;
&  19.00000    ,   19.00000    ,   19.00000                     /;
 */


//c--------------------------------------------------------------------
//c       potenciales o2-o2
//c
//c       J. Chem. Phys., 133, 124311 [2010], doi: 10.1063/1.3479395
//c
//c       calculados por diferencia de separaciones entre
//c                 quintuplete [ccsd[t]] + 
//c                               singlete
//c                               triplete
//c             calculados con mrci 
//c
//c                          Singlete 
//c                          *********
//c--------------------------------------------------------------------




